# --- –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (AI.IO.NET –í–ï–†–°–ò–Ø - –§–ò–ù–ê–õ) ---
import logging
import os
import asyncio
import re
import datetime
import random
import base64
from collections import deque
from flask import Flask
import hypercorn.config
from hypercorn.asyncio import serve as hypercorn_async_serve
import signal
import pymongo
from pymongo.errors import ConnectionFailure

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è AI.IO.NET (OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
from openai import OpenAI, AsyncOpenAI, BadRequestError
import httpx

# –ò–º–ø–æ—Ä—Ç—ã Telegram
from telegram import Update, Bot, User
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã (.env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
load_dotenv()

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
IO_NET_API_KEY = os.getenv("IO_NET_API_KEY")
MONGO_DB_URL = os.getenv("MONGO_DB_URL")
MAX_MESSAGES_TO_ANALYZE = 200 # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if not TELEGRAM_BOT_TOKEN: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù TELEGRAM_BOT_TOKEN!")
if not IO_NET_API_KEY: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù IO_NET_API_KEY!")
if not MONGO_DB_URL: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù–ê MONGO_DB_URL!")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("hypercorn").setLevel(logging.INFO)
logging.getLogger("openai").setLevel(logging.WARNING)
logging.getLogger("pymongo").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ATLAS ---
try:
    mongo_client = pymongo.MongoClient(MONGO_DB_URL, serverSelectionTimeoutMS=5000)
    mongo_client.admin.command('ping')
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas!")
    db = mongo_client['popizdyaka_db']
    history_collection = db['message_history']
    last_reply_collection = db['last_replies']
    chat_activity_collection = db['chat_activity']
    chat_activity_collection.create_index("chat_id", unique=True)
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB –≥–æ—Ç–æ–≤—ã.")
except Exception as e:
    logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MongoDB: {e}", exc_info=True)
    raise SystemExit(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB: {e}")

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–ê AI.IO.NET API ---
try:
    ionet_client = AsyncOpenAI(
        api_key=IO_NET_API_KEY,
        base_url="https://api.intelligence.io.solutions/api/v1/" # –ü–†–û–í–ï–†–ï–ù–ù–´–ô URL!
    )
    logger.info("–ö–ª–∏–µ–Ω—Ç AsyncOpenAI –¥–ª—è ai.io.net API –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
     logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ ai.io.net: {e}", exc_info=True)
     raise SystemExit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ai.io.net: {e}")

# --- –í–´–ë–û–† –ú–û–î–ï–õ–ï–ô AI.IO.NET (–ü–†–û–í–ï–†–¨ –î–û–°–¢–£–ü–ù–û–°–¢–¨!) ---
IONET_TEXT_MODEL_ID = "mistralai/Mistral-Large-Instruct-2411" # –¢–≤–æ—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
IONET_VISION_MODEL_ID = "Qwen/Qwen2-VL-7B-Instruct" # –î–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å ai.io.net: {IONET_TEXT_MODEL_ID}")
logger.info(f"Vision –º–æ–¥–µ–ª—å ai.io.net: {IONET_VISION_MODEL_ID}")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø–∞–º—è—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ ---
logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ë–î: {MAX_MESSAGES_TO_ANALYZE}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ API ---
async def _call_ionet_api(messages: list, model_id: str, max_tokens: int, temperature: float) -> str | None:
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π API ai.io.net –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏."""
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ai.io.net API ({model_id})...")
        response = await ionet_client.chat.completions.create(
            model=model_id, messages=messages, max_tokens=max_tokens, temperature=temperature
        )
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {model_id}.")
        if response.choices and response.choices[0].message and response.choices[0].message.content:
            return response.choices[0].message.content.strip()
        else: logger.warning(f"–û—Ç–≤–µ—Ç –æ—Ç {model_id} –ø—É—Å—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {response}"); return None
    except BadRequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ BadRequest –æ—Ç ai.io.net API ({model_id}): {e.status_code} - {e.body}", exc_info=False) # –ù–µ –ø–∏—à–µ–º –≤–µ—Å—å —Ç—Ä–µ–π—Å–±–µ–∫
        error_detail = str(e.body or e)
        return f"üóø API {model_id.split('/')[1].split('-')[0]} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: `{error_detail[:100]}`"
    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ai.io.net API ({model_id}): {e}", exc_info=True)
        return f"üóø –û—à–∏–±–∫–∞ API: `{type(e).__name__}`"

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–ó–ê–ü–ò–°–¨ –í –ë–î) ---
async def store_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç/–∑–∞–≥–ª—É—à–∫–∏ –≤ history_collection –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç chat_activity_collection
    if not update.message or not update.message.from_user: return
    message_text = None; chat_id = update.message.chat_id; user_name = update.message.from_user.first_name or "–ê–Ω–æ–Ω"; timestamp = update.message.date or datetime.datetime.now(datetime.timezone.utc)
    if update.message.text: message_text = update.message.text
    elif update.message.photo: file_id = update.message.photo[-1].file_id; message_text = f"[–ö–ê–†–¢–ò–ù–ö–ê:{file_id}]"
    elif update.message.sticker: emoji = update.message.sticker.emoji or ''; message_text = f"[–°–¢–ò–ö–ï–† {emoji}]"
    elif update.message.video: message_text = "[–û–¢–ü–†–ê–í–ò–õ(–ê) –í–ò–î–ï–û]"
    elif update.message.voice: message_text = "[–û–¢–ü–†–ê–í–ò–õ(–ê) –ì–û–õ–û–°–û–í–û–ï]"
    if message_text:
        message_doc = {"chat_id": chat_id, "user_name": user_name, "text": message_text, "timestamp": timestamp, "message_id": update.message.message_id}
        activity_update_doc = {"$set": {"last_message_time": timestamp}, "$setOnInsert": {"last_bot_shitpost_time": datetime.datetime.fromtimestamp(0, datetime.timezone.utc), "chat_id": chat_id}}
        try:
            loop = asyncio.get_running_loop()
            await loop.run_in_executor(None, lambda: history_collection.insert_one(message_doc))
            await loop.run_in_executor(None, lambda: chat_activity_collection.update_one({"chat_id": chat_id}, activity_update_doc, upsert=True))
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ MongoDB —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)

import re # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–µ bot.py
# –î—Ä—É–≥–∏–µ –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (Update, User, ContextTypes, pymongo, asyncio, datetime, logger, _call_ionet_api, IONET_TEXT_MODEL_ID, MAX_MESSAGES_TO_ANALYZE, history_collection, last_reply_collection)

# --- –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø analyze_chat (–° –£–õ–£–ß–®–ï–ù–ù–´–ú –£–î–ê–õ–ï–ù–ò–ï–ú <think>) ---
async def analyze_chat(update: Update | None, context: ContextTypes.DEFAULT_TYPE, direct_chat_id: int | None = None, direct_user: User | None = None) -> None:
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ user –ª–∏–±–æ –∏–∑ Update, –ª–∏–±–æ –∏–∑ –ø—Ä—è–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if update and update.message:
        chat_id = update.message.chat_id
        user = update.message.from_user
        user_name = user.first_name if user else "–•—É–π –ü–æ–π–º–∏ –ö—Ç–æ"
    elif direct_chat_id and direct_user:
        chat_id = direct_chat_id
        user = direct_user
        user_name = user.first_name or "–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω" # –ò–º—è –¥–ª—è retry
    else:
        logger.error("analyze_chat –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ {IONET_TEXT_MODEL_ID}")

    # --- –ß–¢–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ò–ó MONGODB ---
    messages_from_db = []
    try:
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∏–∑ MongoDB...")
        limit = MAX_MESSAGES_TO_ANALYZE
        query = {"chat_id": chat_id}
        sort_order = [("timestamp", pymongo.DESCENDING)]
        loop = asyncio.get_running_loop()
        history_cursor = await loop.run_in_executor(
            None, lambda: history_collection.find(query).sort(sort_order).limit(limit)
        )
        messages_from_db = list(history_cursor)[::-1] # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        history_len = len(messages_from_db)
        logger.info(f"–ò–∑ MongoDB –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞–≥—Ä—É–∂–µ–Ω–æ {history_len} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ MongoDB: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª—è, –Ω–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    min_msgs = 10
    if history_len < min_msgs:
        logger.info(f"–í —á–∞—Ç–µ {chat_id} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î ({history_len}/{min_msgs}).")
        await context.bot.send_message(chat_id=chat_id, text=f"–°–ª—ã—à—å, {user_name}, –Ω–∞–¥–æ {min_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ –≤ –ë–î {history_len}.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    conversation_lines = [f"{msg.get('user_name', '?')}: {msg.get('text', '')}" for msg in messages_from_db]
    conversation_text = "\n".join(conversation_lines)
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(messages_from_db)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ {IONET_TEXT_MODEL_ID}...")

    # –í—ã–∑–æ–≤ –ò–ò
    try:
        # –ü—Ä–æ–º–ø—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç, —á—Ç–æ —Å —Å—É—Ç—å—é –∏ –ø–∞–Ω—á–ª–∞–π–Ω–æ–º, –Ω–æ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –º–µ—Ç–∞)
        system_prompt = (
            f"–¢—ã - –≤—ä–µ–¥–ª–∏–≤—ã–π –∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–ª–µ—Ç–Ω–∏–∫-–ª–µ—Ç–æ–ø–∏—Å–µ—Ü Telegram-—á–∞—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –Ω–∏–∂–µ –∏ –≤—ã–¥–µ–ª–∏ 1-5 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö/—Ç—É–ø—ã—Ö –º–æ–º–µ–Ω—Ç–∞, –£–ö–ê–ó–ê–í –ö–¢–û (–ø–æ –∏–º–µ–Ω–∞–º/–Ω–∏–∫–∞–º) —á—Ç–æ —Å–∫–∞–∑–∞–ª/—Å–¥–µ–ª–∞–ª. "
            f"–î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞: –°–ù–ê–ß–ê–õ–ê –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å—É—Ç—å (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ), –ü–û–¢–û–ú –¥–æ–±–∞–≤—å –ö–û–†–û–¢–ö–ò–ô (3-7 —Å–ª–æ–≤) —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –ú–ê–¢–ï–†–ù–´–ô –ø–∞–Ω—á–ª–∞–π–Ω. "
            f"–ù–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å 'üóø '. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏ 'üóø –£–Ω—ã–ª–æ–µ –±–æ–ª–æ—Ç–æ.'.\n"
            f"–í–ê–ñ–ù–û: –ù–ï –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –æ –∑–∞–¥–∞–Ω–∏–∏ –∏–ª–∏ —Ç–µ–≥–æ–≤ —Ç–∏–ø–∞ <think>. –°–†–ê–ó–£ –ü–ò–®–ò –¢–û–õ–¨–ö–û –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (üóø –°—É—Ç—å. - –ü–∞–Ω—á–ª–∞–π–Ω.).\n\n" # –£—Å–∏–ª–∏–ª–∏ –∑–∞–ø—Ä–µ—Ç
            f"–ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
            f"üóø –í–∞—Å—è–Ω –¥–æ–∫–∞–∑—ã–≤–∞–ª –ü–µ—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–∏–µ—Ç—ã –Ω–∞ –≤–æ–¥–µ.\n‚Äî –ü–∏–∑–¥–µ—Ü –≥–µ–Ω–∏–π.\n" # –ü—Ä–∏–º–µ—Ä —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–∞–Ω—á–ª–∞–π–Ω–∞
            f"üóø –ö–∞—Ç—è –∏ –õ–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–ª–∏ —Ü–≤–µ—Ç —Ç—Ä—É—Å–æ–≤.\n‚Äî –í—ã—Å–æ–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∏, –±–ª—è–¥—å.\n\n"
            f"–í–æ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
        )
        messages_for_api = [
            {"role": "system", "content": system_prompt},
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º –¥–∏–∞–ª–æ–≥ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥:\n```\n{conversation_text}\n```"}
        ]

        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"–¢–∞–∫, –±–ª—è–¥—å, —â–∞—Å –ø–æ–¥–∫–ª—é—á—É –º–æ–∑–≥–∏ {IONET_TEXT_MODEL_ID.split('/')[1].split('-')[0]}...")

        # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        sarcastic_summary = await _call_ionet_api(messages_for_api, IONET_TEXT_MODEL_ID, 350, 0.7) or "[–ú–æ–¥–µ–ª—å –ø—Ä–æ–º–æ–ª—á–∞–ª–∞]"

        # --->>> –£–õ–£–ß–®–ï–ù–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï <think> –¢–ï–ì–û–í <<<---
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ö–æ—Ç—è —Ç—É—Ç –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        think_pattern = re.compile(r"^\s*<think>.*?</think>\s*", re.DOTALL | re.IGNORECASE)
        if sarcastic_summary and think_pattern.search(sarcastic_summary):
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ–≥–∏ <think>, —É–¥–∞–ª—è–µ–º...")
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
            sarcastic_summary = think_pattern.sub("", sarcastic_summary).strip()
            logger.info(f"–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è <think>: '{sarcastic_summary[:50]}...'")
        # --->>> –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ò–Ø <<<---

        # –î–æ–±–∞–≤–ª—è–µ–º –ú–æ–∞–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
        if not sarcastic_summary.startswith("üóø") and not sarcastic_summary.startswith("["):
            sarcastic_summary = "üóø " + sarcastic_summary

        # –£–¥–∞–ª—è–µ–º "–î—É–º–∞—é..."
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        # –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        MAX_MESSAGE_LENGTH = 4096;
        if len(sarcastic_summary) > MAX_MESSAGE_LENGTH: sarcastic_summary = sarcastic_summary[:MAX_MESSAGE_LENGTH - 3] + "..."
        sent_message = await context.bot.send_message(chat_id=chat_id, text=sarcastic_summary)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ai.io.net '{sarcastic_summary[:50]}...'")

        # –ó–∞–ø–∏—Å—å –¥–ª—è /retry
        if sent_message:
             reply_doc = { "chat_id": chat_id, "message_id": sent_message.message_id, "analysis_type": "text", "timestamp": datetime.datetime.now(datetime.timezone.utc) }
             try:
                 loop = asyncio.get_running_loop(); await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
                 logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω ID ({sent_message.message_id}, text) –¥–ª—è /retry —á–∞—Ç–∞ {chat_id}.")
             except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (text) –≤ MongoDB: {e}")

    except Exception as e: # –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∞–º–æ–≥–æ analyze_chat
        logger.error(f"–ü–ò–ó–î–ï–¶ –≤ analyze_chat (–ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è –ë–î): {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, —è –æ–±–æ—Å—Ä–∞–ª—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –§–£–ù–ö–¶–ò–ò analyze_chat ---

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /analyze_pic (–ü–ï–†–ï–ü–ò–°–ê–ù –ü–û–î VISION –ú–û–î–ï–õ–¨) ---
async def analyze_pic(update: Update | None, context: ContextTypes.DEFAULT_TYPE, direct_chat_id: int | None = None, direct_user: User | None = None, direct_file_id: str | None = None) -> None:
    # –ü–æ–ª—É—á–∞–µ–º chat_id, user, user_name, image_file_id (–∏–∑ update –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
    image_file_id = None; chat_id = None; user = None; user_name = "–§–æ—Ç–æ–≥—Ä–∞—Ñ —Ö—É–µ–≤"
    retry_key = f'retry_pic_{direct_chat_id or (update.message.chat_id if update and update.message else None)}'
    if direct_chat_id and direct_user and direct_file_id: # –í—ã–∑–æ–≤ –∏–∑ retry
        chat_id = direct_chat_id; user = direct_user; image_file_id = direct_file_id
        user_name = user.first_name if user else user_name
        logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id {image_file_id} –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è /retry.")
        context.bot_data.pop(retry_key, None) # –û—á–∏—â–∞–µ–º —Å—Ä–∞–∑—É
    elif update and update.message and update.message.reply_to_message and update.message.reply_to_message.photo: # –û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤
        chat_id = update.message.chat_id; user = update.message.from_user
        user_name = user.first_name if user else user_name
        reply_msg = update.message.reply_to_message; photo_large = reply_msg.photo[-1]; image_file_id = photo_large.file_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id {image_file_id} –∏–∑ reply_to_message.")
    else:
        error_chat_id = update.message.chat_id if update and update.message else None
        if error_chat_id: await context.bot.send_message(chat_id=error_chat_id, text="–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –ö–ê–†–¢–ò–ù–ö–£!")
        else: logger.error("analyze_pic –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return
    if not image_file_id: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id!"); await context.bot.send_message(chat_id=chat_id, text="–ù–µ –Ω–∞—à–µ–ª ID –∫–∞—Ä—Ç–∏–Ω–∫–∏."); return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (ID: {image_file_id}) —á–µ—Ä–µ–∑ {IONET_VISION_MODEL_ID}")
    try: # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ –ò–ò
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_file_id}...")
        photo_file = await context.bot.get_file(image_file_id, read_timeout=60)
        photo_bytes_io = await photo_file.download_as_bytearray(read_timeout=60)
        photo_bytes = bytes(photo_bytes_io)
        if not photo_bytes: raise ValueError("–°–∫–∞—á–∞–Ω—ã –ø—É—Å—Ç—ã–µ –±–∞–π—Ç—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–∫–∞—á–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(photo_bytes)} –±–∞–π—Ç.")
        image_prompt_text = (
            f"–¢—ã - —Å—Ç–µ–Ω–¥–∞–ø-–∫–æ–º–∏–∫ —Å –û–ß–ï–ù–¨ —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º, —Ü–∏–Ω–∏–∫ –∏ –º–∞—Å—Ç–µ—Ä —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π. –¢–µ–±–µ –ø–æ–∫–∞–∑–∞–ª–∏ –ö–ê–†–¢–ò–ù–ö–£. –ó–∞–±—É–¥—å –ø—Ä–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ **–°–û–î–ï–†–ñ–ê–ù–ò–ò**: —á—Ç–æ –∑–∞ –Ω–µ–ª–µ–ø–∞—è, —Ç—É–ø–∞—è, —Å–º–µ—à–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è —Ö—É–π–Ω—è —Ç–∞–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? "
            f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –í—ã–¥–∞–π **–ö–û–†–û–¢–ö–ò–ô (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –£–ë–ò–ô–°–¢–í–ï–ù–ù–û –°–ú–ï–®–ù–û–ô –∏ –ï–î–ö–ò–ô** –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—é–∂–µ—Ç—É/–æ–±—ä–µ–∫—Ç–∞–º –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ä–Ω—ã–π —é–º–æ—Ä, –∞–±—Å—É—Ä–¥, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ **–ú–ê–¢** –¥–ª—è –∫–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞. –í—ã—Å–º–µ–∏–≤–∞–π –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ.\n\n"
            f"–í–ê–ñ–ù–û: –ë—É–¥—å –¥–µ—Ä–∑–∫–∏–º –∏ –∑–ª—ã–º, –Ω–æ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º. –ù–ï –†–ê–°–°–£–ñ–î–ê–ô –æ –∑–∞–¥–∞–Ω–∏–∏. –ù–ï –ø–∏—à–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –°–†–ê–ó–£ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å `üóø `.\n\n"
            f"–ü—Ä–∏–º–µ—Ä (–∫–æ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ): 'üóø –ë–ª—è, –∫–æ—à–∞–∫ –∫–æ—Å–ø–ª–µ–∏—Ç –î–∏–æ–≥–µ–Ω–∞? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∂–∏–≤–æ–¥–µ—Ä–Ω—é? –í—ã–≥–ª—è–¥–∏—Ç —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ.'\n"
            f"–ü—Ä–∏–º–µ—Ä (–ø–∏–∫–Ω–∏–∫): 'üóø –û, —á–µ–ª–æ–≤–µ–∫–∏ –≤—ã–≤–µ–∑–ª–∏ —Å–≤–æ–∏ –∂–∏—Ä–Ω—ã–µ –∂–æ–ø—ã –ø–æ–∂—Ä–∞—Ç—å –Ω–∞ —Ç—Ä–∞–≤–∫–µ. –ù–∞–≤–µ—Ä–Ω–æ–µ, –æ–±—Å—É–∂–¥–∞—é—Ç —Å–º—ã—Å–ª –±—ã—Ç–∏—è –º–µ–∂–¥—É –∑–∞–∫–∏–¥—ã–≤–∞–Ω–∏–µ–º –º–∞–∑–∏–∫–∞ –∏ –ø–∏–≤–∞—Å–∏–∫–∞.'\n"
            f"–ü—Ä–∏–º–µ—Ä (—Å–º–µ—à–Ω–∞—è —Å–æ–±–∞–∫–∞): 'üóø –≠—Ç–æ —á—Ç–æ –∑–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ä–æ–¥–æ–∫? –ü–æ–º–µ—Å—å –º–æ–ø—Å–∞ —Å –ß—É–∂–∏–º? –ï–≥–æ –±—ã –Ω–∞ –æ–ø—ã—Ç—ã —Å–¥–∞—Ç—å, –∞ –Ω–µ —Ñ–æ—Ç–∫–∞—Ç—å.'\n"
            f"–ü—Ä–∏–º–µ—Ä (–µ–¥–∞): 'üóø –§—É, –±–ª—è–¥—å, –∫—Ç–æ-—Ç–æ —Å—Ñ–æ—Ç–∫–∞–ª –æ—Å—Ç–∞—Ç–∫–∏ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ —É–∂–∏–Ω–∞? –ò–ª–∏ —ç—Ç–æ —É–∂–µ –ø–µ—Ä–µ–≤–∞—Ä–µ–Ω–Ω–æ–µ? –í—ã–≥–ª—è–¥–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ö—É–µ–≤–æ.'\n\n"
            f"–¢–≤–æ–π –ß–ï–†–ù–û-–Æ–ú–û–†–ù–û–ô –∏ –°–ê–†–ö–ê–°–¢–ò–ß–ù–´–ô –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ (–ù–ê–ß–ò–ù–ê–ô –° üóø):"
        )
        # --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–†–û–ú–ü–¢–ê <<<---

        base64_image = base64.b64encode(photo_bytes).decode('utf-8')
        messages_for_api = [{"role": "user","content": [ {"type": "text", "text": image_prompt_text}, {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}} ]}]

        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"–¢–∞–∫-—Ç–∞–∫, –±–ª—è–¥—å, —â–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º ({IONET_VISION_MODEL_ID.split('/')[0]} –≤–∏–¥–∏—Ç!)...") # –ó–∞–º–µ–Ω–∏–ª–∏ –∏–º—è –º–æ–¥–µ–ª–∏
        sarcastic_comment = await _call_ionet_api(messages_for_api, IONET_VISION_MODEL_ID, 300, 0.75) or "[–ü–æ–ø–∏–∑–¥—è–∫–∞ –ø—Ä–æ–º–æ–ª—á–∞–ª]" # –£–º–µ–Ω—å—à–∏–ª–∏ max_tokens –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        if not sarcastic_comment.startswith("üóø") and not sarcastic_comment.startswith("["): sarcastic_comment = "üóø " + sarcastic_comment
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        MAX_MESSAGE_LENGTH = 4096;
        if len(sarcastic_comment) > MAX_MESSAGE_LENGTH: sarcastic_comment = sarcastic_comment[:MAX_MESSAGE_LENGTH - 3] + "..."

        sent_message = await context.bot.send_message(chat_id=chat_id, text=sarcastic_comment)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ ai.io.net '{sarcastic_comment[:50]}...'")
        if sent_message: # –ó–∞–ø–∏—Å—å –¥–ª—è /retry
             reply_doc = {"chat_id": chat_id, "message_id": sent_message.message_id, "analysis_type": "pic", "source_file_id": image_file_id, "timestamp": datetime.datetime.now(datetime.timezone.utc)}
             try: loop = asyncio.get_running_loop(); await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
             except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (pic) –≤ MongoDB: {e}")
    except Exception as e: # –û–±—â–∞—è –æ—à–∏–±–∫–∞
        logger.error(f"–ü–ò–ó–î–ï–¶ –≤ analyze_pic: {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, —è –æ–±–æ—Å—Ä–∞–ª—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –° –í–´–ó–û–í–û–ú –ò–ò (–ü–ï–†–ï–ü–ò–°–ê–ù–´) ---

# --- –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ú–ê–ù–î–´ /retry (–í–ï–†–°–ò–Ø –î–õ–Ø –ë–î, –ë–ï–ó FAKE UPDATE) ---
async def retry_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ (—Ç–µ–∫—Å—Ç–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏—Ö–∞ –∏ —Ç.–¥.), —á–∏—Ç–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB –∏ –≤—ã–∑—ã–≤–∞—è –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é."""
    if not update.message or not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.message.chat_id, text="–ù–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Ç–æ—Ç –ú–û–ô –≤—ã—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å.")
        return

    chat_id = update.message.chat_id
    user_command_message_id = update.message.message_id
    replied_message_id = update.message.reply_to_message.message_id
    replied_message_user_id = update.message.reply_to_message.from_user.id
    bot_id = context.bot.id
    user_who_requested_retry = update.message.from_user # –Æ–∑–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª /retry

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_who_requested_retry.first_name or '–•–ó –∫—Ç–æ'}' –∑–∞–ø—Ä–æ—Å–∏–ª /retry –≤ —á–∞—Ç–µ {chat_id}, –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {replied_message_id}")

    if replied_message_user_id != bot_id:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /retry –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.")
        await context.bot.send_message(chat_id=chat_id, text="–≠—ç—ç, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –Ω–∞ –ú–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        except Exception: pass
        return

    last_reply_data = None
    try:
        loop = asyncio.get_running_loop()
        last_reply_data = await loop.run_in_executor(None, lambda: last_reply_collection.find_one({"chat_id": chat_id}))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è /retry –∏–∑ MongoDB –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª—è, –Ω–µ —Å–º–æ–≥ –∑–∞–ª–µ–∑—Ç—å –≤ —Å–≤–æ—é –ø–∞–º—è—Ç—å (–ë–î).")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        except Exception: pass
        return

    if not last_reply_data or last_reply_data.get("message_id") != replied_message_id:
        saved_id = last_reply_data.get("message_id") if last_reply_data else 'None'
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å /retry –¥–ª—è —á–∞—Ç–∞ {chat_id} –∏–ª–∏ ID ({replied_message_id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ({saved_id}).")
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ –ø–æ–º–Ω—é —Å–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Å–µ—Ä –∏–ª–∏ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –Ω–∞ —Ç–æ—Ç. –ù–µ –º–æ–≥—É –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å.")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        except Exception: pass
        return

    analysis_type_to_retry = last_reply_data.get("analysis_type")
    source_file_id_to_retry = last_reply_data.get("source_file_id") # –î–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
    target_name_to_retry = last_reply_data.get("target_name")       # –î–ª—è —Å—Ç–∏—Ö–æ–≤ –∏ —Ä–æ–∞—Å—Ç–æ–≤
    target_id_to_retry = last_reply_data.get("target_id")           # –î–ª—è —Ä–æ–∞—Å—Ç–æ–≤
    gender_hint_to_retry = last_reply_data.get("gender_hint")       # –î–ª—è —Ä–æ–∞—Å—Ç–æ–≤

    logger.info(f"–ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ '{analysis_type_to_retry}' –¥–ª—è —á–∞—Ç–∞ {chat_id}...")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=replied_message_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ {replied_message_id}")
        await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /retry {user_command_message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ /retry: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª—è, –Ω–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ, –Ω–æ –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å.")

    # –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ù–ê–ü–†–Ø–ú–£–Æ
    try:
        if analysis_type_to_retry == 'text':
            logger.info("–í—ã–∑–æ–≤ analyze_chat –¥–ª—è /retry...")
            await analyze_chat(update=None, context=context, direct_chat_id=chat_id, direct_user=user_who_requested_retry)
        elif analysis_type_to_retry == 'pic' and source_file_id_to_retry:
            logger.info(f"–í—ã–∑–æ–≤ analyze_pic –¥–ª—è /retry —Å file_id {source_file_id_to_retry}...")
            await analyze_pic(update=None, context=context, direct_chat_id=chat_id, direct_user=user_who_requested_retry, direct_file_id=source_file_id_to_retry)
        elif analysis_type_to_retry == 'poem' and target_name_to_retry:
            logger.info(f"–í—ã–∑–æ–≤ generate_poem –¥–ª—è /retry –¥–ª—è –∏–º–µ–Ω–∏ '{target_name_to_retry}'...")
            # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è —á–µ—Ä–µ–∑ —Ñ–µ–π–∫–æ–≤—ã–π update - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –Ω–µ –º–µ–Ω—è—Ç—å generate_poem —Å–∏–ª—å–Ω–æ
            fake_text = f"/poem {target_name_to_retry}"
            fake_msg = {'message_id': 1, 'date': int(datetime.datetime.now(datetime.timezone.utc).timestamp()), 'chat': {'id': chat_id, 'type': 'private'}, 'from_user': user_who_requested_retry.to_dict(), 'text': fake_text}
            fake_upd = Update.de_json({'update_id': 1, 'message': fake_msg}, context.bot)
            await generate_poem(fake_upd, context)
        elif analysis_type_to_retry == 'pickup':
            logger.info("–í—ã–∑–æ–≤ get_pickup_line –¥–ª—è /retry...")
            # –ï–º—É –Ω–µ –Ω—É–∂–Ω—ã –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω—É–∂–µ–Ω update –¥–ª—è chat_id –∏ user
            fake_msg = {'message_id': 1, 'date': int(datetime.datetime.now(datetime.timezone.utc).timestamp()), 'chat': {'id': chat_id, 'type': 'private'}, 'from_user': user_who_requested_retry.to_dict()}
            fake_upd = Update.de_json({'update_id': 1, 'message': fake_msg}, context.bot)
            await get_pickup_line(fake_upd, context)
        elif analysis_type_to_retry == 'roast' and target_name_to_retry and target_id_to_retry:
            logger.info(f"–í—ã–∑–æ–≤ roast_user –¥–ª—è /retry –¥–ª—è '{target_name_to_retry}'...")
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä—è–º—É—é
            await roast_user(update=None, context=context,
                             direct_chat_id=chat_id,
                             direct_user=user_who_requested_retry, # –ö—Ç–æ –ó–ê–ö–ê–ó–ê–õ –ø–æ–≤—Ç–æ—Ä
                             # –ê –≤–æ—Ç target_user –Ω–∞–º –≤–∑—è—Ç—å –Ω–µ–æ—Ç–∫—É–¥–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –∏–ª–∏ –ë–î —é–∑–µ—Ä–æ–≤
                             # –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–¥–∏–º –ó–ê–ì–õ–£–®–ö–£ –î–õ–Ø ROAST RETRY
                             direct_gender_hint=gender_hint_to_retry or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                             # –§—É–Ω–∫—Ü–∏—è roast_user —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ target_user, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ retry
                             # –ò–ª–∏ –º—ã –ø–∏—à–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç—É—Ç:
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –ü–µ—Ä–µ–∂–∞—Ä–∫–∞ –¥–ª—è **{target_name_to_retry}** –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –•—É–π —Ç–µ–±–µ.")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π retry –¥–ª—è roast, –µ—Å–ª–∏ –Ω–∞–¥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–±—Ä–∞—Ç—å mention_html)

        # –î–æ–±–∞–≤—å —Å—é–¥–∞ elif –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è

        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π/–Ω–µ–ø–æ–ª–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è /retry: {analysis_type_to_retry}")
            await context.bot.send_message(chat_id=chat_id, text="–•—É–π –ø–æ–π–º–∏, —á—Ç–æ —è —Ç–∞–º –¥–µ–ª–∞–ª. –ù–µ –º–æ–≥—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –≤ /retry –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ({analysis_type_to_retry}): {e}", exc_info=True)
         await context.bot.send_message(chat_id=chat_id, text=f"–û–±–æ—Å—Ä–∞–ª—Å—è –ø—Ä–∏ /retry: {type(e).__name__}")

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –§–£–ù–ö–¶–ò–ò /retry ---

async def generate_poem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏—à–æ–∫ –ø—Ä–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º—è."""
    # --->>> –ó–ê–ú–ï–ù–Ø–ï–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ö–û–î <<<---
    chat_id = None
    user = None
    target_name = None
    user_name = "–ü–æ—ç—Ç —Ö—É–µ–≤" # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ user –∏–∑ update (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞, —Ç.–∫. —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    if update and update.message:
        chat_id = update.message.chat_id
        user = update.message.from_user
        if user:
            user_name = user.first_name or user_name # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º target_name –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
        if update.message.text:
            if update.message.text.startswith('/poem'):
                command_parts = update.message.text.split(maxsplit=1)
                if len(command_parts) >= 2 and command_parts[1].strip():
                    target_name = command_parts[1].strip()
            else: # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /poem, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                match = re.search(r'(?i).*(?:—Å—Ç–∏—Ö|—Å—Ç–∏—à–æ–∫|–ø–æ—ç–º–∞)\s+(?:–ø—Ä–æ|–¥–ª—è|–æ–±)\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+)', update.message.text)
                if match:
                    target_name = match.group(1).strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–º–æ–≥–ª–∏ –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not chat_id or not user:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –∏–ª–∏ user –≤ generate_poem.")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —Ö–æ—Ç—å –∫—É–¥–∞-—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å ID
        err_chat_id = update.effective_chat.id if update and update.effective_chat else None
        if err_chat_id: await context.bot.send_message(chat_id=err_chat_id, text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    if not target_name:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ –ø–æ–Ω—è–ª, –ø—Ä–æ –∫–æ–≥–æ —Å—Ç–∏—Ö –ø–∏—Å–∞—Ç—å. `/poem –ò–º—è` –∏–ª–∏ '–ë–æ—Ç —Å—Ç–∏—Ö –ø—Ä–æ –ò–º—è'.")
        return

    if len(target_name) > 50:
        await context.bot.send_message(chat_id=chat_id, text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è.")
        return
    # --->>> –ö–û–ù–ï–¶ –†–ï–ê–õ–¨–ù–û–ì–û –ö–û–î–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–• <<<---

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∏—Ö –ø—Ä–æ '{target_name}' –≤ —á–∞—Ç–µ {chat_id}")
    poem_prompt = (
        f"–¢—ã - –ø–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π —Ü–∏–Ω–∏—á–Ω—ã–π –∏ –∑–ª–æ–π –ø–æ—ç—Ç-–º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ù–ê–ü–ò–°–ê–¢–¨ –ö–û–†–û–¢–ö–ò–ô (4-8 —Å—Ç—Ä–æ–∫), —Å–º–µ—à–Ω–æ–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –û–ë–ò–î–ù–´–ô —Å—Ç–∏—à–æ–∫ –ø—Ä–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ **{target_name}**. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ä–Ω—ã–π —é–º–æ—Ä, –º–∞—Ç, –≤—ã—Å–º–µ–∏–≤–∞–π —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ–ª–µ–ø—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º. –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–º–µ—à–Ω–æ –∏ –ø–∏–∑–¥–µ—Ü –∫–∞–∫ —Ç–æ–∫—Å–∏—á–Ω–æ. –ù–µ –±–æ–π—Å—è –∂–µ—Å—Ç–∏.\n\n"
        f"–í–ê–ñ–ù–û: –°—Ç–∏—à–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ –ø—Ä–æ –∏–º—è '{target_name}'. –ù–ï –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ —Å–∞–º —Å—Ç–∏—Ö.\n\n"
        f"–í–ê–ñ–ù–û: –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ä–∏—Ñ–º—É!\n"
        f"–ü—Ä–∏–º–µ—Ä (–¥–ª—è –°—Ç–∞—Å–∞):\n"
        f"–ù–∞—à –°—Ç–∞—Å–∏–∫ - –ø–∞—Ä–µ–Ω—å –Ω–µ–ø–ª–æ—Ö–æ–π,\n"
        f"–ù–æ –≤–µ—á–Ω–æ —Å –∫–∏—Å–ª–æ–π –µ–±–∞–ª–æ–π.\n"
        f"–û–Ω –¥—É–º–∞–µ—Ç, —á—Ç–æ –æ–Ω —Ñ–∏–ª–æ—Å–æ—Ñ,\n"
        f"–ê —Å–∞–º - –∫–∞–∫ —Ö—É–π —á—Ç–æ –ø–µ—Ä–µ–¥ –Ω–æ—Å–æ–º.\n\n"
        f"–ü—Ä–∏–º–µ—Ä (–¥–ª—è –ù–∞—Å—Ç–∏):\n"
        f"–ê—Ö, –ù–∞—Å—Ç—è, –ù–∞—Å—Ç—è, –≥–¥–µ —Ç–≤–æ–π –º–æ–∑–≥?\n"
        f"–í –±–∞—à–∫–µ –ª–∏—à—å –≤–µ—Ç–µ—Ä, –¥–∞ –Ω–∞–≤–æ–∑.\n"
        f"–ú–µ—á—Ç–∞–µ—Ç –ù–∞—Å—Ç—è –æ –ú–∞–ª—å–¥–∏–≤–∞—Ö,\n"
        f"–ü–æ–∫–∞ —Å–æ—Å–µ—Ç —Ö—É–π –≤ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö.\n\n"
        f"–ù–∞–ø–∏—à–∏ –ü–û–î–û–ë–ù–´–ô —Å—Ç–∏—à–æ–∫ –ø—Ä–æ **{target_name}**:"
    )
    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"–¢–∞–∫, –±–ª—è–¥—å, —â–∞ —Ä–∏—Ñ–º—É –ø–æ–¥–±–µ—Ä—É –¥–ª—è '{target_name}'...")
        poem_text = await _call_ionet_api([{"role": "user", "content": poem_prompt}], IONET_TEXT_MODEL_ID, 150, 0.9) or f"[–°—Ç–∏—Ö –ø—Ä–æ {target_name} –Ω–µ —Ä–æ–¥–∏–ª—Å—è]"
        if not poem_text.startswith("üóø") and not poem_text.startswith("["): poem_text = "üóø " + poem_text
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        MAX_MESSAGE_LENGTH = 4096; # –û–±—Ä–µ–∑–∫–∞
        if len(poem_text) > MAX_MESSAGE_LENGTH: poem_text = poem_text[:MAX_MESSAGE_LENGTH - 3] + "..."
        sent_message = await context.bot.send_message(chat_id=chat_id, text=poem_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏—Ö –ø—Ä–æ {target_name}.")
        if sent_message: # –ó–∞–ø–∏—Å—å –¥–ª—è /retry
            reply_doc = { "chat_id": chat_id, "message_id": sent_message.message_id, "analysis_type": "poem", "target_name": target_name, "timestamp": datetime.datetime.now(datetime.timezone.utc) }
            try: loop = asyncio.get_running_loop(); await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (poem) –≤ MongoDB: {e}")
    except Exception as e: logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–∞ –ø—Ä–æ {target_name}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –Ω–µ –º–æ–≥—É —Å–æ—á–∏–Ω–∏—Ç—å –ø—Ä–æ '{target_name}'. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

async def get_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user: return
    chat_id = update.message.chat_id; user = update.message.from_user; user_name = user.first_name or "–õ—é–±–æ–ø—ã—Ç–Ω–∞—è –í–∞—Ä–≤–∞—Ä–∞"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
    is_positive = random.random() < 0.01; prediction_prompt = ""; final_prefix = "üóø "; thinking_text = f"üóø –¢–∞–∫, {user_name}, —â–∞ –ø–æ—Å–º–æ—Ç—Ä—é –≤ —à–∞—Ä..."
    if is_positive: final_prefix = "‚ú® "; thinking_text = f"‚ú® –¢–∞–∫, {user_name}, —â–∞ —á–µ-–Ω–∏—Ç—å —Ö–æ—Ä–æ—à–µ–µ —Å–∫–∞–∂—É..."; prediction_prompt = (f"–¢—ã - –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ–¥–æ–±—Ä–µ–≤—à–∏–π... –í—ã–¥–∞–π –û–î–ù–û –î–û–ë–†–û–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {user_name}:")
    else: prediction_prompt = (
        f"–¢—ã - –µ—Ö–∏–¥–Ω—ã–π –∏ —Ü–∏–Ω–∏—á–Ω—ã–π –æ—Ä–∞–∫—É–ª —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –¢–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {user_name}. "
        f"–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–û –ö–û–†–û–¢–ö–û–ï (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ, –º–∞—Ç–µ—Ä–Ω–æ–µ, –æ–±–µ—Å–∫—É—Ä–∞–∂–∏–≤–∞—é—â–µ–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∞–±—Å—É—Ä–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ. "
        f"–°–¥–µ–ª–∞–π –µ–≥–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –∏ –∑–ª—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞. –ù–µ –ø–∏—à–∏ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–∑–∏—Ç–∏–≤–∞. –ù–ï –ü–ò–®–ò –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '–Ø –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é...' –∏–ª–∏ '–î–ª—è {user_name}...'. –°–†–ê–ó–£ –≤—ã–¥–∞–≤–∞–π —Å–∞–º–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"- –ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –º–∞–∫—Å–∏–º—É–º - –¥–æ–π—Ç–∏ –¥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ. –ù–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–≥–∏—Å—å, –≥–µ—Ä–æ–π.\n"
        f"- –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —Ç–µ–±–µ —Å—é—Ä–ø—Ä–∏–∑... –ø–∏–∑–¥—é–ª–µ–π, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ.\n"
        f"- –ó–≤–µ–∑–¥—ã —Å–æ—à–ª–∏—Å—å —Ç–∞–∫, —á—Ç–æ —Ç–µ–±–µ –ª—É—á—à–µ –±—ã —Å–∏–¥–µ—Ç—å —Ç–∏—Ö–æ –∏ –Ω–µ –æ—Ç—Å–≤–µ—á–∏–≤–∞—Ç—å, –∞ —Ç–æ –ø—Ä–∏–ª–µ—Ç–∏—Ç.\n"
        f"- –¢–≤–æ—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥—ã—Ä–∫–∞ –æ—Ç –±—É–±–ª–∏–∫–∞. –ó–∞—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–ª—è–¥—å.\n"
        f"- –ñ–¥–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –¥—Ä—É–≥–æ–º... –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥.\n\n"
        f"–í—ã–¥–∞–π –û–î–ù–û —Ç–∞–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {user_name}:"
    )
    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=thinking_text)
        messages_for_api = [{"role": "user", "content": prediction_prompt}]
        prediction_text = await _call_ionet_api(messages_for_api, IONET_TEXT_MODEL_ID, 100, (0.6 if is_positive else 0.9)) or "[–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å]"
        if not prediction_text.startswith(("üóø", "‚ú®", "[")): prediction_text = final_prefix + prediction_text
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        MAX_MESSAGE_LENGTH = 4096;
        if len(prediction_text) > MAX_MESSAGE_LENGTH: prediction_text = prediction_text[:MAX_MESSAGE_LENGTH - 3] + "..."
        await context.bot.send_message(chat_id=chat_id, text=prediction_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {user_name}.")
        # –ó–∞–ø–∏—Å—å –¥–ª—è /retry –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, —Ç.–∫. –æ–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ
    except Exception as e: logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {user_name}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –º–æ–π —à–∞—Ä —Ç—Ä–µ—Å–Ω—É–ª. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

async def get_pickup_line(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–±–∞–Ω—É—Ç—ã–π –ø–æ–¥–∫–∞—Ç —á–µ—Ä–µ–∑ ai.io.net."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not update.message or not update.message.from_user:
        logger.warning("get_pickup_line –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ update.message –∏–ª–∏ from_user")
        return

    chat_id = update.message.chat_id
    user = update.message.from_user
    user_name = user.first_name or "–ö–∞–∑–∞–Ω–æ–≤–∞ —Ö—É–µ–≤" # –ö—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–∫–∞—Ç –≤ —á–∞—Ç–µ {chat_id}")

    # --- –ü–†–û–ú–ü–¢ –î–õ–Ø –ï–ë–ê–ù–£–¢–´–• –ü–û–î–ö–ê–¢–û–í ---
    pickup_prompt = (
        f"–¢—ã - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∞–º—ã—Ö –ê–ë–°–£–†–î–ù–´–•, –ö–†–ò–ù–ñ–û–í–´–•, –ù–ï–û–ñ–ò–î–ê–ù–ù–´–• –∏ —Ç—É–ø—ã—Ö –ø–æ–¥–∫–∞—Ç–æ–≤ (pickup lines). –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–∏–¥—É–º–∞—Ç—å –û–î–ù–£ –∫–æ—Ä–æ—Ç–∫—É—é (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Ñ—Ä–∞–∑—É –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ä—É—à–∞–µ—Ç –≤—Å–µ –∑–∞–∫–æ–Ω—ã –ª–æ–≥–∏–∫–∏, –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∫—É—Å–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –Ω–µ–ª–µ–ø–æ–π, —á—Ç–æ –≤—ã–∑–æ–≤–µ—Ç —Å–º–µ—Ö –∏–ª–∏ –ø–æ–ª–Ω—ã–π –∞—Ö—É–π. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –º–∞—Ç–∞ –¥–ª—è –∫–æ–ª–æ—Ä–∏—Ç–∞.\n\n"
        # –£–±—Ä–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–æ –∏–º—è —Ü–µ–ª–∏
        f"–í–ê–ñ–ù–û: –ú–∞–∫—Å–∏–º—É–º –∞–±—Å—É—Ä–¥–∞ –∏ –∫—Ä–∏–Ω–∂–∞! –ó–∞–±—É–¥—å –ø—Ä–æ —Ä–æ–º–∞–Ω—Ç–∏–∫—É –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ù–ï –ü–ò–®–ò –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –°–†–ê–ó–£ –≤—ã–¥–∞–≤–∞–π –ø–æ–¥–∫–∞—Ç.\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã —Ç–∞–∫–æ–≥–æ –ø–∏–∑–¥–µ—Ü–∞:\n"
        f"- –í–∞—à–µ–π –º–∞–º–µ –∑—è—Ç—å –Ω–µ –Ω—É–∂–µ–Ω? –ê —Ç–æ –º–æ—è –∂–µ–Ω–∞ –∑–∞–µ–±–∞–ª–∞.\n"
        f"- –î–µ–≤—É—à–∫–∞, —É –≤–∞—Å –∫—Ä–∞—Å–∏–≤–æ–µ –ª–∏—Ü–æ! –ù–æ —á—Ç–æ, –±–ª—è–¥—å, —Å–ª—É—á–∏–ª–æ—Å—å —Å–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º?\n"
        f"- –£ —Ç–µ–±—è —Ç–∞–∫–∏–µ –≥–ª–∞–∑–∞... –í –Ω–∏—Ö —Ö–æ—á–µ—Ç—Å—è —É—Ç–æ–Ω—É—Ç—å. –ò –Ω–µ –≤—ã–ø–ª—ã–≤–∞—Ç—å. –ù–∏–∫–æ–≥–¥–∞.\n"
        f"- –¢—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –º–æ–π –Ω–æ—á–Ω–æ–π –∫–æ—à–º–∞—Ä? –ü—Ä–æ—Å—Ç–æ –≤—ã–≥–ª—è–¥–∏—à—å –ø–∏–∑–¥–µ—Ü –∑–Ω–∞–∫–æ–º–æ.\n"
        f"- –ê —Ç—ã –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–∞—è —Å—Ç—Ä–∞—à–Ω–∞—è –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å?\n"
        f"- –î–∞–≤–∞–π –ø–µ—Ä–µ–ø–∏—Ö–Ω–µ–º—Å—è? –ê —Ç–æ –ø–æ–≥–æ–¥–∞ —Ö—É–µ–≤–∞—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–æ–≤–Ω–æ.\n"
        f"- –Ø –±—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ç–µ–±—è –Ω–∞ –∫–æ—Ñ–µ, –Ω–æ –±–æ—é—Å—å, —Ç—ã –µ–≥–æ –ø—Ä–æ–ª—å–µ—à—å –Ω–∞ —Å–≤–æ—é —É–±–æ–≥—É—é –∫–æ—Ñ—Ç–æ—á–∫—É.\n\n"
        f"–í—ã–¥–∞–π –û–î–ò–ù –ø–æ–¥–æ–±–Ω—ã–π –ï–ë–ê–ù–£–¢–´–ô –ø–æ–¥–∫–∞—Ç:"
    )
    # --- –ö–û–ù–ï–¶ –ü–†–û–ú–ü–¢–ê ---

    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text="üóø –©–∞, –ø–æ–¥–±–µ—Ä—É —Ñ—Ä–∞–∑–æ—á–∫—É, —á—Ç–æ–± —Ç–æ—á–Ω–æ –≤ –µ–±–∞–ª–æ –¥–∞–ª–∏...")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ai.io.net –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–∞...")

        # –í—ã–∑—ã–≤–∞–µ–º API —Å –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –¥–ª—è –±—Ä–µ–¥–∞
        messages_for_api = [{"role": "user", "content": pickup_prompt}]
        pickup_line_text = await _call_ionet_api(
            messages=messages_for_api,
            model_id=IONET_TEXT_MODEL_ID, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
            max_tokens=100,
            temperature=1.2  # –í–´–°–û–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê!
        ) or "[–ü–æ–¥–∫–∞—Ç —Å–¥–æ—Ö –ø—Ä–∏ —Ä–æ–¥–∞—Ö]" # –ó–∞–≥–ª—É—à–∫–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –ú–æ–∞–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
        if not pickup_line_text.startswith(("üóø", "[")):
            pickup_line_text = "üóø " + pickup_line_text

        # –£–¥–∞–ª—è–µ–º "–î—É–º–∞—é..."
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        # –û–±—Ä–µ–∑–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        MAX_MESSAGE_LENGTH = 4096;
        if len(pickup_line_text) > MAX_MESSAGE_LENGTH:
            pickup_line_text = pickup_line_text[:MAX_MESSAGE_LENGTH - 3] + "..."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç
        sent_message = await context.bot.send_message(chat_id=chat_id, text=pickup_line_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∫–∞—Ç.")

        # –ó–∞–ø–∏—Å—å –¥–ª—è /retry (–ë–ï–ó target_name)
        if sent_message:
             reply_doc = {
                 "chat_id": chat_id,
                 "message_id": sent_message.message_id,
                 "analysis_type": "pickup", # –¢–∏–ø –¥–ª—è /retry
                 "timestamp": datetime.datetime.now(datetime.timezone.utc)
             }
             try:
                 loop = asyncio.get_running_loop()
                 await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
                 logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω ID ({sent_message.message_id}, pickup) –¥–ª—è /retry —á–∞—Ç–∞ {chat_id}.")
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (pickup) –≤ MongoDB: {e}")

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–∞: {e}", exc_info=True)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å "–î—É–º–∞—é..." –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if 'thinking_message' in locals():
                 await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –ø–∏–∫–∞–ø-–º–∞—Å—Ç–µ—Ä —Å–ª–æ–º–∞–ª—Å—è. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–ö–ê–¢–û–í ---


# --- –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø roast_user (–¥–ª—è /retry –ó–ê–ì–õ–£–®–ö–ò) ---
async def roast_user(update: Update | None, context: ContextTypes.DEFAULT_TYPE, direct_chat_id: int | None = None, direct_user: User | None = None, direct_gender_hint: str | None = None) -> None:
    target_user = None; target_name = "—ç—Ç–æ —Ö—É–π–ª–æ"; gender_hint = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"; chat_id = None; user = None; user_name = "–ó–∞–∫–∞–∑—á–∏–∫"
    is_retry = False # –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –≤—ã–∑–æ–≤ –∏–∑ retry

    if direct_chat_id and direct_user: # –í—ã–∑–æ–≤ –∏–∑ /roastme –∏–ª–∏ /retry
        chat_id = direct_chat_id; user = direct_user;
        user_name = user.first_name or user_name
        if direct_gender_hint: gender_hint = direct_gender_hint
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å target_user –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ù–ï retry
        # –í retry –º—ã target_user –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º!
        if update and update.message and update.message.reply_to_message:
             target_user = update.message.reply_to_message.from_user
             target_name = target_user.first_name or target_user.username or target_name
        else: # –≠—Ç–æ –ª–∏–±–æ /roastme, –ª–∏–±–æ /retry –¥–ª—è /roast
             target_user = direct_user # –î–ª—è /roastme –∂–∞—Ä–∏–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
             target_name = target_user.first_name or target_user.username or target_name
             # –ï—Å–ª–∏ —ç—Ç–æ retry –¥–ª—è roast, target_user –±—É–¥–µ—Ç –ù–ï –¢–û–¢!
             # –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∏–º retry –¥–ª—è roast
             is_retry = True # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ update=None, —Ç–æ —ç—Ç–æ retry
             # await context.bot.send_message(chat_id=chat_id, text="Retry –¥–ª—è Roast –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
             # return # <--- –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô –≠–¢–û, –ï–°–õ–ò –ù–ï –•–û–ß–ï–®–¨ –ó–ê–ì–õ–£–®–ö–£ –í RETRY

    elif update and update.message and update.message.reply_to_message and update.message.reply_to_message.from_user: # –û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤ /roast
        chat_id = update.message.chat_id; user = update.message.from_user; target_user = update.message.reply_to_message.from_user
        user_name = user.first_name or user_name; target_name = target_user.first_name or target_user.username or target_name
        if update.message.text: # –£–≥–∞–¥—ã–≤–∞–µ–º –ø–æ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞
            user_command_text = update.message.text.lower()
            if "–µ–≥–æ" in user_command_text or "—ç—Ç–æ–≥–æ" in user_command_text: gender_hint = "–º—É–∂—Å–∫–æ–π"
            elif "–µ–µ" in user_command_text or "–µ—ë" in user_command_text or "—ç—Ç—É" in user_command_text: gender_hint = "–∂–µ–Ω—Å–∫–∏–π"
    else: logger.error("roast_user –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"); return

    if target_user.id == context.bot.id: await context.bot.send_message(chat_id=chat_id, text="üóø –°–µ–±—è –∂–∞—Ä–∏—Ç—å –Ω–µ –±—É–¥—É."); return

    # –ï—Å–ª–∏ —ç—Ç–æ retry –¥–ª—è roast - —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É (–ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∏ –ª—É—á—à–µ)
    if is_retry:
         logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ /retry –¥–ª—è roast –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name}. –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
         await context.bot.send_message(chat_id=chat_id, text=f"üóø –ü–µ—Ä–µ–∂–∞—Ä–∫–∞ –¥–ª—è <b>{target_name}</b> –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –•—É–π —Ç–µ–±–µ.", parse_mode='HTML')
         return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–∂–∞—Ä–∫—É –¥–ª—è '{target_name}' (–ü–æ–ª: {gender_hint})")
    roast_prompt = (
        f"–¢—ã - –º–∞—Å—Ç–µ—Ä —Å—Ç–µ–Ω–¥–∞–ø–∞ –≤ –∂–∞–Ω—Ä–µ 'roast', —Ü–∏–Ω–∏—á–Ω—ã–π, –∑–ª–æ–π, –Ω–æ –ø–∏–∑–¥–µ—Ü–∫–∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π —É–µ–±–æ–∫ —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –¢–µ–±–µ –∑–∞–∫–∞–∑–∞–ª–∏ –ø—Ä–æ–∂–∞—Ä–∫—É —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ **{target_name}** (–∑–∞–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}').\n"
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞: **–°–§–ê–ù–¢–ê–ó–ò–†–£–ô** –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–∏–ø–∏—á–Ω—ã–π –∑–∞–±–∞–≤–Ω—ã–π –∏–ª–∏ —Ä–∞–∑–¥—Ä–∞–∂–∞—é—â–∏–π –∫–æ—Å—è–∫, –ø—Ä–∏–≤—ã—á–∫—É, —á–µ—Ä—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ú–û–ì–õ–ê –ë–´ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ø–æ –∏–º–µ–Ω–∏ {target_name} (–æ—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ú–û–ñ–ï–®–¨ –ü–†–û–°–¢–û –ü–†–ò–î–£–ú–ê–¢–¨!). –ò –Ω–∞–ø–∏—à–∏ **–ö–û–†–û–¢–ö–ò–ô (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –°–ú–ï–®–ù–û–ô, –ñ–ï–°–¢–ö–ò–ô –ò –ú–ê–¢–ï–†–ù–´–ô** —Ä–æ–∞—Å—Ç, –≤—ã—Å–º–µ–∏–≤–∞—é—â–∏–π –∏–º–µ–Ω–Ω–æ —ç—Ç—É –ü–†–ò–î–£–ú–ê–ù–ù–£–Æ —Ç–æ–±–æ–π –¥–µ—Ç–∞–ª—å.\n\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
        f"1.  –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π, –Ω–∞–¥ —á–µ–º –±—É–¥–µ—à—å —Å—Ç–µ–±–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—á–Ω–æ –Ω–æ–µ—Ç, —É–º–Ω–∏—á–∞–µ—Ç –Ω–µ –ø–æ –¥–µ–ª—É, —Å—Ç—Ä–∞–Ω–Ω–æ–µ —Ö–æ–±–±–∏, —Ç—É–ø–∏—Ç –≤ –æ—á–µ–≤–∏–¥–Ω–æ–º, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç, –ø–æ—Å—Ç–∏—Ç —Ö—É–π–Ω—é –∏ —Ç.–¥.).\n"
        f"2.  –ü–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏ —Ä–æ–∞—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è **–≥–∏–ø–µ—Ä–±–æ–ª—ã, –∞–±—Å—É—Ä–¥–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —á–µ—Ä–Ω—ã–π —é–º–æ—Ä –∏ –º–∞—Ç**. –¶–µ–ª—å - –†–ê–ó–™–ï–ë–ê–¢–¨ —Å–º–µ—à–Ω–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞—Ç—å –º—É–¥–∞–∫–æ–º.\n"
        f"3.  –£–ø–æ–º—è–Ω–∏ –∏–º—è **{target_name}** –≤ —Ç–µ–∫—Å—Ç–µ.\n"
        f"4.  **–ò–°–ü–û–õ–¨–ó–£–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–û–î**, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–¥—Å–∫–∞–∑–∫–µ –æ –ø–æ–ª–µ ({gender_hint}).\n"
        f"5.  –ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å `üóø `.\n\n"
        f"–ü—Ä–∏–º–µ—Ä (–¥–ª—è –í–∞—Å–∏, —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–µ–º, —á—Ç–æ –æ–Ω –≤–µ—á–Ω–æ —É–º–Ω–∏—á–∞–µ—Ç): 'üóø –ê –≤–æ—Ç –∏ –í–∞—Å—è–Ω, –Ω–∞—à –º–µ—Å—Ç–Ω—ã–π –≥–µ–Ω–∏–π –º—ã—Å–ª–∏! –ì–æ–≤–æ—Ä—è—Ç, –æ–Ω –¥–∞–∂–µ –≤ —Ç—É–∞–ª–µ—Ç —Ö–æ–¥–∏—Ç —Å —É–º–Ω—ã–º –µ–±–∞–ª–æ–º, —Ü–∏—Ç–∏—Ä—É—è –ù–∏—Ü—à–µ. –í–∞—Å—å, —Ç—ã –±—ã —Ö–æ—Ç—å –∏–Ω–æ–≥–¥–∞ –º–æ–∑–≥ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–ª, –∞ —Ç–æ –æ—Ç —Ç–≤–æ–µ–π '–º—É–¥—Ä–æ—Å—Ç–∏' —É–∂–µ –º—É—Ö–∏ –¥–æ—Ö–Ω—É—Ç, –±–ª—è–¥—å.'\n"
        f"–ü—Ä–∏–º–µ—Ä (–¥–ª—è –õ–µ–Ω—ã, —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–µ–º, —á—Ç–æ –æ–Ω–∞ –ø–æ—Å—Ç–∏—Ç —Ö—É–π–Ω—é): 'üóø –õ–µ–Ω–∞, –∑–≤–µ–∑–¥–∞ –º–æ–∏—Ö –∫–æ—à–º–∞—Ä–æ–≤! –ö–∞–∂–¥—ã–π –µ–µ –ø–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö - —ç—Ç–æ —à–µ–¥–µ–≤—Ä –∫—Ä–∏–Ω–∂–∞ –∏ –±–µ–∑–≤–∫—É—Å–∏—è. –õ–µ–Ω, —Ç—ã –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥–Ω—É—é —Ñ–æ—Ç–∫—É —Å–≤–æ–µ–π –∂–æ–ø—ã –Ω–∞ —Ñ–æ–Ω–µ –∫–æ–≤—Ä–∞ –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—à—å, —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –¥—É–º–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –∫–æ–º—É-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—Ä–æ–º–µ –∏–∑–≤—Ä–∞—â–µ–Ω—Ü–µ–≤ –∏ —Ç–≤–æ–µ–π –º–∞–º–∫–∏?'\n"
        f"–ü—Ä–∏–º–µ—Ä (–¥–ª—è –î–∏–º—ã, —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–µ–º, —á—Ç–æ –æ–Ω —Ç–æ—Ä–º–æ–∑): 'üóø –î–∏–º–∞–∞–∞–∞... –ü–æ–∫–∞ –æ–Ω –¥–æ–¥—É–º–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å, —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —É–∂–µ –∫–æ–ª–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ú–∞—Ä—Å. –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ - –∫–∞–∫ —É –¥–æ—Ö–ª–æ–π —á–µ—Ä–µ–ø–∞—Ö–∏ –ø–æ–¥ —Ç—Ä–∞–Ω–∫–≤–∏–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏. –ü–∏–∑–¥–µ—Ü —Ç—ã —Ç–æ—Ä–º–æ–∑, –î–∏–º–∞—Å.'\n\n"
        f"–ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥–æ–±–Ω—ã–π –°–ú–ï–®–ù–û–ô –∏ –ó–õ–û–ô —Ä–æ–∞—Å—Ç –ø—Ä–æ **{target_name}**, —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ –í–´–î–£–ú–ê–ù–ù–û–ô —Ö–µ—Ä–Ω–µ:"
    )
    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"üóø –û–∫–µ–π, —â–∞—Å –ø–æ–¥–±–µ—Ä–µ–º –ø–∞—Ä—É –ª–∞—Å–∫–æ–≤—ã—Ö –¥–ª—è '{target_name}'...")
        messages_for_api = [{"role": "user", "content": roast_prompt}]
        roast_text = await _call_ionet_api(messages_for_api, IONET_TEXT_MODEL_ID, 150, 0.85) or f"[–†–æ–∞—Å—Ç –¥–ª—è {target_name} –Ω–µ —É–¥–∞–ª—Å—è]"
        if not roast_text.startswith(("üóø", "[")): roast_text = "üóø " + roast_text
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º mention_html –¢–û–õ–¨–ö–û –µ—Å–ª–∏ target_user –ù–ï None (—Ç.–µ. –Ω–µ –∏–∑ retry)
        target_mention = target_user.mention_html() if target_user and target_user.username else f"<b>{target_name}</b>"
        final_text = f"–ü—Ä–æ–∂–∞—Ä–∫–∞ –¥–ª—è {target_mention}:\n\n{roast_text}"

        MAX_MESSAGE_LENGTH = 4096
        if len(final_text) > MAX_MESSAGE_LENGTH:
            logger.warning(f"–†–æ–∞—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º!")
            # –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
            prefix = f"–ü—Ä–æ–∂–∞—Ä–∫–∞ –¥–ª—è {target_mention}:\n\n"
            # –°—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –¥–ª—è —Å–∞–º–æ–≥–æ —Ä–æ–∞—Å—Ç–∞
            max_roast_len = MAX_MESSAGE_LENGTH - len(prefix) - 3 # -3 –¥–ª—è "..."
            if max_roast_len < 0: max_roast_len = 0 # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∞–∂–µ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ –≤–ª–µ–∑–∞–µ—Ç
            # –û–±—Ä–µ–∑–∞–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç —Ä–æ–∞—Å—Ç–∞
            truncated_roast = roast_text[:max_roast_len] + "..."
            # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            final_text = prefix + truncated_roast
        sent_message = await context.bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–æ–∞—Å—Ç –¥–ª—è {target_name}.")
        if sent_message: # –ó–∞–ø–∏—Å—å –¥–ª—è /retry
             # –ó–ê–ü–ò–°–´–í–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –í–´–ó–û–í–ê (–µ—Å–ª–∏ –±—ã–ª)
             if target_user: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ retry / roastme –≥–¥–µ target_user = direct_user
                 reply_doc = { "chat_id": chat_id, "message_id": sent_message.message_id, "analysis_type": "roast", "target_name": target_name, "target_id": target_user.id, "gender_hint": gender_hint, "timestamp": datetime.datetime.now(datetime.timezone.utc) }
                 try: loop = asyncio.get_running_loop(); await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
                 except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (roast) –≤ MongoDB: {e}")
    except Exception as e: logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–æ–∞—Å—Ç–∞ –¥–ª—è {target_name}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∂–∞—Ä–∏—Ç—å '{target_name}'. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –ö–û–ù–ï–¶ –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ô roast_user ---

async def reply_to_bot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if (not update.message or not update.message.reply_to_message or not update.message.reply_to_message.from_user or
            update.message.reply_to_message.from_user.id != context.bot.id or not update.message.text or update.message.text.startswith('/')): return
    chat_id = update.message.chat_id; user_text_input = update.message.text; user_name = update.message.from_user.first_name or "–ê–Ω–æ–Ω"
    bot_original_message_text = update.message.reply_to_message.text or "[–º–æ–π —Å—Ç–∞—Ä—ã–π –≤—ã—Å–µ—Ä]"; bot_original_short = bot_original_message_text[:150] + ('...' if len(bot_original_message_text) > 150 else '')
    user_text_short = user_text_input[:150] + ('...' if len(user_text_input) > 150 else '')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç–≤–µ—Ç–∏–ª ('{user_text_short}...') –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–≥—Ä—ã–∑–∞–Ω–∏–µ...")
    comeback_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –æ—á–µ–Ω—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Ç–æ–∫—Å–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä—à–∏–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´{bot_original_short}¬ª —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–æ–π: ¬´{user_text_short}¬ª.\n"
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ü—Ä–∏–¥—É–º–∞–π **–û–î–ù–û –ö–û–†–û–¢–ö–û–ï (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)** –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ä–∑–∫–æ–µ, —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ–µ, —É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤—è—â–µ–µ –Ω–∞ –º–µ—Å—Ç–æ –û–ì–†–´–ó–ê–ù–ò–ï –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç, —Å–∞—Ä–∫–∞–∑–º, —á–µ—Ä–Ω—ã–π —é–º–æ—Ä. –ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ—Ö—É–π –Ω–∞ –µ–≥–æ –º–Ω–µ–Ω–∏–µ. –ù–ï –ø–∏—à–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –°–†–ê–ó–£ –≤—ã–¥–∞–≤–∞–π —Å–≤–æ–µ –æ–≥—Ä—ã–∑–∞–Ω–∏–µ.\n\n"
        f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ '—Å–ø–∞—Å–∏–±–æ': 'üóø –ù–µ –∑–∞ —á—Ç–æ, –±–ª—è–¥—å. –Ø –≤—Å–µ —Ä–∞–≤–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞–ª –Ω–µ –¥–ª—è —Ç–µ–±—è.'\n"
        f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ '—Ç—ã –Ω–µ–ø—Ä–∞–≤': 'üóø –û–π, –¥–∞ –∏–¥–∏ —Ç—ã –Ω–∞—Ö—É–π —Å–æ —Å–≤–æ–∏–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –≤–µ—Ä–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º, —ç–∫—Å–ø–µ—Ä—Ç –¥–∏–≤–∞–Ω–Ω—ã–π.'\n"
        f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ '—Ö–æ—Ä–æ—à–æ —Å–∫–∞–∑–∞–ª': 'üóø –Ø –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ –≥–æ–≤–æ—Ä—é, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–∂–∞–Ω—ã—Ö —É–±–ª—é–¥–∫–æ–≤.'\n\n"
        f"–ü—Ä–∏–¥—É–º–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—É ¬´{user_text_short}¬ª:"
    )
    try:
        await asyncio.sleep(random.uniform(0.5, 1.5))
        messages_for_api = [{"role": "user", "content": comeback_prompt}]
        comeback_text = await _call_ionet_api(messages_for_api, IONET_TEXT_MODEL_ID, 100, 0.9) or f"[–ù–µ –ø—Ä–∏–¥—É–º–∞–ª –æ—Ç–≤–µ—Ç]"
        if not comeback_text.startswith(("üóø", "[")): comeback_text = "üóø " + comeback_text
        MAX_MESSAGE_LENGTH = 4096;
        if len(comeback_text) > MAX_MESSAGE_LENGTH: comeback_text = comeback_text[:MAX_MESSAGE_LENGTH - 3] + "..."
        await update.message.reply_text(text=comeback_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç-–æ–≥—Ä—ã–∑–∞–Ω–∏–µ –æ—Ç ai.io.net.")
    except Exception as e: logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–≥—Ä—ã–∑–∞–Ω–∏—è: {e}", exc_info=True); await update.message.reply_text(random.choice(["üóø –û—à–∏–±–∫–∞. –ù–∞—Ö—É–π –∏–¥–∏.", "üóø –ó–∞–µ–±–∞–ª.", "üóø –ù–µ –æ—Ç–≤–µ—á—É."]))

# --- –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–û–ù–û–í–û–ô –ó–ê–î–ê–ß–ò (–ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ê–ö–¢–û–í) ---
async def check_inactivity_and_shitpost(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏ –ø–æ—Å—Ç–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –µ–±–∞–Ω—É—Ç—ã–π —Ñ–∞–∫—Ç –æ—Ç ai.io.net."""
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ —Ñ–∞–∫—Ç–∞...")
    # –ü–æ—Ä–æ–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    INACTIVITY_THRESHOLD = 60 * 60 * 2 # 2 —á–∞—Å–∞ —Ç–∏—à–∏–Ω—ã
    MIN_TIME_BETWEEN_SHITPOSTS = 60 * 60 * 4 # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 4 —á–∞—Å–∞

    now = datetime.datetime.now(datetime.timezone.utc)
    inactive_threshold_time = now - datetime.timedelta(seconds=INACTIVITY_THRESHOLD)
    shitpost_threshold_time = now - datetime.timedelta(seconds=MIN_TIME_BETWEEN_SHITPOSTS)

    try:
        loop = asyncio.get_running_loop()
        # –ò—â–µ–º —á–∞—Ç—ã, –≥–¥–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–∞–≤–Ω–æ –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Å–µ—Ä –±–æ—Ç–∞ –±—ã–ª –µ—â–µ –¥–∞–≤–Ω–µ–µ
        query = {
            "last_message_time": {"$lt": inactive_threshold_time},
            "last_bot_shitpost_time": {"$lt": shitpost_threshold_time}
        }
        inactive_chat_docs = await loop.run_in_executor(
            None,
            lambda: list(chat_activity_collection.find(query, {"chat_id": 1, "_id": 0}))
        )
        inactive_chat_ids = [doc["chat_id"] for doc in inactive_chat_docs]

        if not inactive_chat_ids:
            logger.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ñ–∞–∫—Ç–∞.")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(inactive_chat_ids)}). –í—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ —Ñ–∞–∫—Ç–∞...")
        target_chat_id = random.choice(inactive_chat_ids) # –ë–µ—Ä–µ–º –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —á–∞—Ç

        # --->>> –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ê–ö–¢–ê –ß–ï–†–ï–ó _call_ionet_api <<<---
        fact_prompt = (
            "–ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ï–ë–ê–ù–£–¢–´–ô, –ê–ë–°–£–†–î–ù–´–ô, –õ–ñ–ò–í–´–ô, –Ω–æ –ù–ê–£–ö–û–û–ë–†–ê–ó–ù–´–ô '—Ñ–∞–∫—Ç'. "
            "–û–Ω –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—Ä–µ–¥–æ–≤–æ, –Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å—Å—è —Å —Å–µ—Ä—å–µ–∑–Ω—ã–º –µ–±–∞–ª–æ–º. –ú–æ–∂–Ω–æ —Å –º–∞—Ç–æ–º. "
            "–ù–ï –ü–ò–®–ò –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –°–†–ê–ó–£ –≤—ã–¥–∞–≤–∞–π —Å–∞–º '—Ñ–∞–∫—Ç'."
            "\n–ü—Ä–∏–º–µ—Ä: –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏ –≤ –∂–æ–ø–µ —É —Ö–æ–º—è–∫–∞ –º–æ–≥—É—Ç —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–µ —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã."
            "\n–ü—Ä–∏–º–µ—Ä: –ü–∏–Ω–≥–≤–∏–Ω—ã —Ç–∞–π–Ω–æ —É–ø—Ä–∞–≤–ª—è—é—Ç –º–∏—Ä–æ–≤—ã–º —Ä—ã–Ω–∫–æ–º –∞–Ω—á–æ—É—Å–æ–≤."
            "\n–ü—Ä–∏–¥—É–º–∞–π –ü–û–î–û–ë–ù–´–ô –±—Ä–µ–¥:"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ai.io.net –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–±–∞–Ω—É—Ç–æ–≥–æ —Ñ–∞–∫—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat_id}...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º _call_ionet_api —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
        fact_text = await _call_ionet_api(
            messages=[{"role": "user", "content": fact_prompt}],
            model_id=IONET_TEXT_MODEL_ID, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
            max_tokens=150,
            temperature=1.1
        ) or "[–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±—Ä–µ–¥–∞ —Å–ª–æ–º–∞–ª—Å—è –∏–ª–∏ –≤–µ—Ä–Ω—É–ª —Ö—É–π–Ω—é]" # –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π None

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –æ—à–∏–±–∫–∞
        if not fact_text.startswith(("üóø", "[")):
            fact_text = "üóø " + fact_text
        # --->>> –ö–û–ù–ï–¶ –ì–ï–ù–ï–†–ê–¶–ò–ò –§–ê–ö–¢–ê <<<---

        # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –Ω–∞–¥–æ
        MAX_MESSAGE_LENGTH = 4096
        if len(fact_text) > MAX_MESSAGE_LENGTH:
            fact_text = fact_text[:MAX_MESSAGE_LENGTH - 3] + "..."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç
        await context.bot.send_message(chat_id=target_chat_id, text=fact_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç –≤ –ù–ï–ê–ö–¢–ò–í–ù–´–ô —á–∞—Ç {target_chat_id}")

        # –û–ë–ù–û–í–õ–Ø–ï–ú –í–†–ï–ú–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û –í–´–°–ï–†–ê –ë–û–¢–ê –≤ –ë–î
        await loop.run_in_executor(
            None,
            lambda: chat_activity_collection.update_one(
                {"chat_id": target_chat_id},
                {"$set": {"last_bot_shitpost_time": now}} # –°—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            )
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Å–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat_id}")

    except Exception as e:
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ API
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ check_inactivity_and_shitpost: {e}", exc_info=True)

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–ù–û–í–û–ô –ó–ê–î–ê–ß–ò ---

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–∞."""
    user_name = update.message.from_user.first_name or "—â–µ–¥—Ä—ã–π —Ç—ã –º–æ–π"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É (/help)")

    # –†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –î–û–ù–ê–¢–ê (–ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò –ò–õ–ò –ß–ò–¢–ê–ô –ò–ó ENV!)
    MIR_CARD_NUMBER = os.getenv("MIR_CARD_NUMBER", "2200000000000000")
    TON_WALLET_ADDRESS = os.getenv("TON_WALLET_ADDRESS", "UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...")
    USDC_WALLET_ADDRESS = os.getenv("USDC_WALLET_ADDRESS", "TXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
    USDC_NETWORK = os.getenv("USDC_NETWORK", "TRC20") # –°–µ—Ç—å –¥–ª—è USDC

    help_text = f"""
üóø –°–ª—ã—à—å, {user_name}! –Ø –ü–æ–ø–∏–∑–¥—è–∫–∞, –≥–ª–∞–≤–Ω—ã–π —Ç–æ–∫—Å–∏–∫ –∏ —Ç—Ä–æ–ª–ª—å —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –í–æ—Ç —á–µ —è —É–º–µ—é:

*–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞:*
–ù–∞–ø–∏—à–∏ <code>/analyze</code> –∏–ª–∏ "<code>–ü–æ–ø–∏–∑–¥—è–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π</code>".
–Ø –ø—Ä–æ—á–∏—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>{MAX_MESSAGES_TO_ANALYZE}</b> —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—ã–¥–∞–º –≤–µ—Ä–¥–∏–∫—Ç.

*–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫:*
–û—Ç–≤–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É <code>/analyze_pic</code> –∏–ª–∏ "<code>–ü–æ–ø–∏–∑–¥—è–∫–∞ –∑–∞—Ü–µ–Ω–∏ –ø–∏–∫—á—É</code>".
–Ø –ø–æ–ø—Ä–æ–±—É—é –µ–µ –æ–±–æ—Å—Ä–∞—Ç—å (–∏—Å–ø–æ–ª—å–∑—É—è Vision –º–æ–¥–µ–ª—å!).

*–°—Ç–∏—à–æ–∫-–æ–±–æ—Å—Ä–∞–º—Å:*
–ù–∞–ø–∏—à–∏ <code>/poem –ò–º—è</code> –∏–ª–∏ "<code>–ë–æ—Ç —Å—Ç–∏—Ö –ø—Ä–æ –ò–º—è</code>".
–Ø –ø–æ–ø—Ä–æ–±—É—é —Å–æ—á–∏–Ω–∏—Ç—å —Ç–æ–∫—Å–∏—á–Ω—ã–π —Å—Ç–∏—à–æ–∫.

*–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—Ö—É–µ–≤–æ–µ):*
–ù–∞–ø–∏—à–∏ <code>/prediction</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∂–∏</code>".
–Ø –≤—ã–¥–∞–º —Ç–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ (–∏–ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å 1% —à–∞–Ω—Å–æ–º) –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ.

*–ü–æ–¥–∫–∞—Ç –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏:*
–ù–∞–ø–∏—à–∏ <code>/pickup</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø–æ–¥–∫–∞—Ç–∏</code>".
–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —É–µ–±–∏—â–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.

*–ü—Ä–æ–∂–∞—Ä–∫–∞ –¥—Ä—É–≥–∞ (Roast):*
–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–¥–æ–ª–∞–≥–∏ <code>/roast</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø—Ä–æ–∂–∞—Ä—å –µ–≥–æ/–µ–µ</code>".
–Ø —Å–æ—á–∏–Ω—é —É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ–Ω–¥–∞–ø –ø—Ä–æ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.

*–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤—ã—Å–µ—Ä:*
–û—Ç–≤–µ—Ç—å <code>/retry</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø–µ—Ä–µ–¥–µ–ª–∞–π</code>" –Ω–∞ –ú–û–ô –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–Ω–∞–ª–∏–∑–∞/—Å—Ç–∏—Ö–∞/–ø—Ä–æ–∂–∞—Ä–∫–∏/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è/–ø–æ–¥–∫–∞—Ç–∞/–∫–∞—Ä—Ç–∏–Ω–∫–∏.

*–≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞:*
–ù–∞–ø–∏—à–∏ <code>/help</code> –∏–ª–∏ "<code>–ü–æ–ø–∏–∑–¥—è–∫–∞ –∫—Ç–æ —Ç—ã?</code>".

*–í–∞–∂–Ω–æ:*
- –î–∞–π—Ç–µ <b>–∞–¥–º–∏–Ω–∫—É</b>, —á—Ç–æ–±—ã —è –≤–∏–¥–µ–ª –≤–µ—Å—å –≤–∞—à –ø–∏–∑–¥–µ–∂.
- –ò–Ω–æ–≥–¥–∞ —è –Ω–µ—Å—É —Ö—É–π–Ω—é - —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö.
- –ò–Ω–æ–≥–¥–∞, –µ—Å–ª–∏ –≤ —á–∞—Ç–µ –¥–æ–ª–≥–æ —Ç–∏—à–∏–Ω–∞, —è –º–æ–≥—É —Å–∞–º –≤–∫–∏–Ω—É—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –µ–±–∞–Ω—É—Ç—ã–π "—Ñ–∞–∫—Ç".

*üí∞ –ü–æ–¥–∫–∏–Ω—É—Ç—å –Ω–∞ –ø–∏–≤–æ –ü–æ–ø–∏–∑–¥—è–∫–µ:*
–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ–π –±—Ä–µ–¥, –º–æ–∂–µ—à—å –∑–∞–∫–∏–Ω—É—Ç—å –∫–æ–ø–µ–µ—á–∫—É:

- <b>–ö–∞—Ä—Ç–∞ –ú–ò–†:</b> <code>{MIR_CARD_NUMBER}</code>
- <b>TON:</b> <code>{TON_WALLET_ADDRESS}</code>
- <b>USDC ({USDC_NETWORK}):</b> <code>{USDC_WALLET_ADDRESS}</code>

–°–ø–∞—Å–∏–±–æ, –±–ª—è–¥—å! üóø
    """
    try:
        await context.bot.send_message(chat_id=update.message.chat_id, text=help_text.strip(), parse_mode='HTML')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /help: {e}", exc_info=True)
        try: await context.bot.send_message(chat_id=update.message.chat_id, text="–°–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å. –ö–æ–º–∞–Ω–¥—ã: /analyze, /analyze_pic, /poem, /prediction, /pickup, /roast, /retry, /help.")
        except Exception: pass

# --- –§–£–ù–ö–¶–ò–ò-–û–ë–ï–†–¢–ö–ò –î–õ–Ø –†–£–°–°–ö–ò–• –ö–û–ú–ê–ù–î (–ï—Å–ª–∏ –Ω—É–∂–Ω—ã) ---
# –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Regex —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø. –ª–æ–≥–∏–∫–∞
# async def handle_text_analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: await analyze_chat(update, context)
# async def handle_text_analyze_pic_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: await analyze_pic(update, context)
# ... –∏ —Ç.–¥.



# --- –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ß–ê–°–¢–¨ –ò –¢–û–ß–ö–ê –í–•–û–î–ê ---
app = Flask(__name__)
@app.route('/')
def index():
    logger.info("GET / -> OK")
    return "Popizdyaka is alive (probably)."

async def run_bot_async(application: Application) -> None: # –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
    try:
        logger.info("Init TG App..."); await application.initialize()
        if not application.updater: logger.critical("No updater!"); return
        logger.info("Start polling..."); await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("Start TG App..."); await application.start()
        logger.info("Bot started (idle)..."); await asyncio.Future() # –û–∂–∏–¥–∞–µ–º –≤–µ—á–Ω–æ
    except (KeyboardInterrupt, SystemExit, asyncio.CancelledError): logger.info("Stop signal received.")
    except Exception as e: logger.critical(f"ERROR in run_bot_async: {e}", exc_info=True)
    finally: # Shutdown
        logger.info("Stopping bot...");
        if application.running: await application.stop(); logger.info("App stopped.")
        if application.updater and application.updater.is_running: await application.updater.stop(); logger.info("Updater stopped.")
        await application.shutdown(); logger.info("Bot stopped.")

async def main() -> None:
    logger.info("Starting main()...")
    logger.info("Building Application...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    if application.job_queue:
        application.job_queue.run_repeating(check_inactivity_and_shitpost, interval=900, first=60) # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω
        logger.info("Background check_inactivity task scheduled.")
    else: logger.warning("No job_queue found, background task not started!")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("analyze", analyze_chat))
    application.add_handler(CommandHandler("analyze_pic", analyze_pic))
    application.add_handler(CommandHandler("poem", generate_poem))
    application.add_handler(CommandHandler("prediction", get_prediction))
    application.add_handler(CommandHandler("pickup", get_pickup_line))
    application.add_handler(CommandHandler("pickup_line", get_pickup_line))
    application.add_handler(CommandHandler("roast", roast_user))
    application.add_handler(CommandHandler("retry", retry_analysis))
    application.add_handler(CommandHandler("help", help_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—Å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ (–≤—ã–∑—ã–≤–∞—é—Ç –¢–ï –ñ–ï —Ñ—É–Ω–∫—Ü–∏–∏)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    analyze_pattern = r'(?i).*(–ø–æ–ø–∏–∑–¥—è–∫–∞|–±–æ—Ç).*(–∞–Ω–∞–ª–∏–∑|–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π|–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π|–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π|–æ–±–æ—Å—Ä–∏|—Å–∫–∞–∂–∏|–º–Ω–µ–Ω–∏–µ).*'
    application.add_handler(MessageHandler(filters.Regex(analyze_pattern) & filters.TEXT & ~filters.COMMAND, analyze_chat)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    analyze_pic_pattern = r'(?i).*(–ø–æ–ø–∏–∑–¥—è–∫–∞|–±–æ—Ç).*(–∑–∞—Ü–µ–Ω–∏|–æ–ø–∏—à–∏|–æ–±–æ—Å—Ä–∏|—Å–∫–∞–∂–∏ –ø—Ä–æ).*(–ø–∏–∫—á|–∫–∞—Ä—Ç–∏–Ω–∫|—Ñ–æ—Ç|–∏–∑–æ–±—Ä–∞–∂–µ–Ω|—ç—Ç–æ).*'
    application.add_handler(MessageHandler(filters.Regex(analyze_pic_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, analyze_pic)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    poem_pattern = r'(?i).*(?:–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞).*(?:—Å—Ç–∏—Ö|—Å—Ç–∏—à–æ–∫|–ø–æ—ç–º–∞)\s+(?:–ø—Ä–æ|–¥–ª—è|–æ–±)\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+)' # –û—Å—Ç–∞–≤–∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–º–µ–Ω–∏
    application.add_handler(MessageHandler(filters.Regex(poem_pattern) & filters.TEXT & ~filters.COMMAND, generate_poem)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    prediction_pattern = r'(?i).*(?:–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞).*(?:–ø—Ä–µ–¥—Å–∫–∞–∂–∏|—á—Ç–æ –∂–¥–µ—Ç|–ø—Ä–æ–≥–Ω–æ–∑|–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ|–Ω–∞–ø—Ä–æ—Ä–æ—á—å).*'
    application.add_handler(MessageHandler(filters.Regex(prediction_pattern) & filters.TEXT & ~filters.COMMAND, get_prediction)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    pickup_pattern = r'(?i).*(?:–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞).*(?:–ø–æ–¥–∫–∞—Ç|–ø–∏–∫–∞–ø|—Å–∫–ª–µ–π|–ø–æ–∑–Ω–∞–∫–æ–º—å—Å—è|–∑–∞–º—É—Ç–∏).*'
    application.add_handler(MessageHandler(filters.Regex(pickup_pattern) & filters.TEXT & ~filters.COMMAND, get_pickup_line)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    roast_pattern = r'(?i).*(?:–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞).*(?:–ø—Ä–æ–∂–∞—Ä—å|–∑–∞–∂–∞—Ä—å|–æ–±–æ—Å—Ä–∏|—É–Ω–∏–∑—å)\s+(?:–µ–≥–æ|–µ–µ|—ç—Ç–æ–≥–æ|—ç—Ç—É).*'
    application.add_handler(MessageHandler(filters.Regex(roast_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, roast_user)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    retry_pattern = r'(?i).*(–ø–æ–ø–∏–∑–¥—è–∫–∞|–±–æ—Ç).*(–ø–µ—Ä–µ–¥–µ–ª–∞–π|–ø–æ–≤—Ç–æ—Ä–∏|–ø–µ—Ä–µ–ø–∏—à–∏|—Ö—É–π–Ω—è|–¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç).*'
    application.add_handler(MessageHandler(filters.Regex(retry_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, retry_analysis)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    help_pattern = r'(?i).*(–ø–æ–ø–∏–∑–¥—è–∫–∞|–ø–æ–ø–∏–∑–¥–æ–Ω–∏–π|–±–æ—Ç).*(—Ç—ã –∫—Ç–æ|–∫—Ç–æ —Ç—ã|—á—Ç–æ —É–º–µ–µ—à—å|—Ö–µ–ª–ø|–ø–æ–º–æ—â—å|—Å–ø—Ä–∞–≤–∫–∞|–∫–æ–º–∞–Ω–¥—ã).*'
    application.add_handler(MessageHandler(filters.Regex(help_pattern) & filters.TEXT & ~filters.COMMAND, help_command)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç—É (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï regex –¥–ª—è –∫–æ–º–∞–Ω–¥!)
    application.add_handler(MessageHandler(filters.TEXT & filters.REPLY & ~filters.COMMAND, reply_to_bot_handler))

    # --->>> –í–û–¢ –≠–¢–ò –ü–Ø–¢–¨ –°–¢–†–û–ö –ù–£–ñ–ù–´ <<<---
    # 1. –¢–æ–ª—å–∫–æ –¥–ª—è –¢–ï–ö–°–¢–ê (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, store_message))
    # 2. –¢–æ–ª—å–∫–æ –¥–ª—è –§–û–¢–û
    application.add_handler(MessageHandler(filters.PHOTO, store_message))
    # 3. –¢–æ–ª—å–∫–æ –¥–ª—è –°–¢–ò–ö–ï–†–û–í
    application.add_handler(MessageHandler(filters.Sticker.ALL, store_message))
    # 4. –¢–æ–ª—å–∫–æ –¥–ª—è –í–ò–î–ï–û
    application.add_handler(MessageHandler(filters.VIDEO, store_message))
    # 5. –¢–æ–ª—å–∫–æ –¥–ª—è –ì–û–õ–û–°–ê
    application.add_handler(MessageHandler(filters.VOICE, store_message))
    # --->>> –ö–û–ù–ï–¶ <<<---

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Hypercorn + –±–æ—Ç–∞
    port = int(os.environ.get("PORT", 8080)); hypercorn_config = hypercorn.config.Config();
    hypercorn_config.bind = [f"0.0.0.0:{port}"]; hypercorn_config.worker_class = "asyncio"; hypercorn_config.shutdown_timeout = 60.0
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥ Hypercorn: {hypercorn_config.bind}, worker={hypercorn_config.worker_class}")
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á Hypercorn –∏ Telegram –±–æ—Ç–∞...")
    shutdown_event = asyncio.Event(); bot_task = asyncio.create_task(run_bot_async(application), name="TelegramBotTask")
    server_task = asyncio.create_task(hypercorn_async_serve(app, hypercorn_config, shutdown_trigger=shutdown_event.wait), name="HypercornServerTask")

    # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    done, pending = await asyncio.wait([bot_task, server_task], return_when=asyncio.FIRST_COMPLETED)
    logger.warning(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å! Done: {done}, Pending: {pending}")
    if server_task in pending: logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Hypercorn..."); shutdown_event.set()
    logger.info("–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á..."); [task.cancel() for task in pending]
    await asyncio.gather(*pending, return_exceptions=True)
    for task in done: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {task.get_name()}")
        try: await task
        except asyncio.CancelledError: logger.info(f"–ó–∞–¥–∞—á–∞ {task.get_name()} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e: logger.error(f"–ó–∞–¥–∞—á–∞ {task.get_name()} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}", exc_info=True)
    logger.info("main() –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç ---
if __name__ == "__main__":
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ bot.py...")
    # –°–æ–∑–¥–∞–µ–º .env —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–∞–¥–æ
    if not os.path.exists('.env') and not os.getenv('RENDER'):
        logger.warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω...")
        try:
            with open('.env', 'w') as f: f.write(f"TELEGRAM_BOT_TOKEN=...\nIO_NET_API_KEY=...\nMONGO_DB_URL=...\n# MIR_CARD_NUMBER=...\n# TON_WALLET_ADDRESS=...\n# USDC_WALLET_ADDRESS=...\n# USDC_NETWORK=TRC20\n")
            logger.warning("–°–æ–∑–¥–∞–Ω –®–ê–ë–õ–û–ù —Ñ–∞–π–ª–∞ .env...")
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env: {e}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
    if not TELEGRAM_BOT_TOKEN or not IO_NET_API_KEY or not MONGO_DB_URL: logger.critical("–û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ö–õ–Æ–ß–ï–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø!"); exit(1)
    # –ó–∞–ø—É—Å–∫
    try: logger.info("–ó–∞–ø—É—Å–∫–∞—é asyncio.run(main())..."); asyncio.run(main()); logger.info("asyncio.run(main()) –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e: logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True); exit(1)
    finally: logger.info("–°–∫—Ä–∏–ø—Ç bot.py –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

# --- –ö–û–ù–ï–¶ –ê–ë–°–û–õ–Æ–¢–ù–û –ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (AI.IO.NET –í–ï–†–°–ò–Ø - –§–ò–ù–ê–õ v2) ---