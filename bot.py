# --- –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (–í–ï–†–°–ò–Ø –î–õ–Ø GROQ API) ---
import logging
import os
import asyncio
from collections import deque
from flask import Flask
import hypercorn.config
from hypercorn.asyncio import serve as hypercorn_async_serve
import signal

# --->>> –£–ë–†–ê–õ–ò –ò–ú–ü–û–†–¢–´ GEMINI <<<---
# --->>> –î–û–ë–ê–í–ò–õ–ò –ò–ú–ü–û–†–¢–´ OPENAI <<<---
from openai import OpenAI, AsyncOpenAI # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É OpenAI
import httpx # –û–Ω–∞ –Ω—É–∂–Ω–∞ openai >= 1.0
# --->>> –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ò–ú–ü–û–†–¢–ê–• <<<---

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã (.env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
load_dotenv()

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# --->>> –î–û–ë–ê–í–ò–õ–ò –ö–õ–Æ–ß GROQ <<<---
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
# --->>> –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–ô <<<---
MAX_MESSAGES_TO_ANALYZE = 500

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if not TELEGRAM_BOT_TOKEN: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù TELEGRAM_BOT_TOKEN!")
if not GROQ_API_KEY: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù GROQ_API_KEY! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render!") # <-- –ò–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("hypercorn").setLevel(logging.INFO)
# –î–æ–±–∞–≤–∏–º –ª–æ–≥–≥–µ—Ä –¥–ª—è OpenAI, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
logging.getLogger("openai").setLevel(logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–ê GROQ API ---
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–°–ò–ù–•–†–û–ù–ù–´–ô –∫–ª–∏–µ–Ω—Ç OpenAI, –Ω–æ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ Groq
    groq_client = AsyncOpenAI(
        api_key=GROQ_API_KEY,
        base_url="https://api.groq.com/openai/v1" # –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ GROQ - –ü–†–û–í–ï–†–¨ –í –î–û–ö–ï –ù–ê –í–°–Ø–ö–ò–ô!
    )
    logger.info("–ö–ª–∏–µ–Ω—Ç AsyncOpenAI –¥–ª—è Groq API –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
     logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ Groq: {e}", exc_info=True)
     raise SystemExit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ Groq: {e}")

# –£–ö–ê–ó–´–í–ê–ï–ú ID –ú–û–î–ï–õ–ò, –ö–û–¢–û–†–£–Æ –¢–´ –í–´–ë–†–ê–õ
# –£–ë–ï–î–ò–°–¨, –ß–¢–û –û–ù–ê –¢–û–ß–ù–û –ï–°–¢–¨ –í –°–ü–ò–°–ö–ï –ù–ê GROQ.COM/API/MODELS !!!
GROQ_MODEL_ID = "deepseek-r1-distill-llama-70b" # <--- –¢–í–û–ô –í–´–ë–û–† (–ü–†–û–í–ï–†–¨ –ù–ê–õ–ò–ß–ò–ï!)
# –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π: "llama3-8b-8192" –∏–ª–∏ "mixtral-8x7b-32768"
logger.info(f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–¥–µ–ª—å Groq: {GROQ_MODEL_ID}")
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–õ–ò–ï–ù–¢–ê GROQ API ---

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
chat_histories = {}
logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {MAX_MESSAGES_TO_ANALYZE}")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô (store_message –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def store_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ store_message –æ—Å—Ç–∞–µ—Ç—Å—è –¢–û–ß–ù–û –¢–ê–ö–ò–ú –ñ–ï, –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏)
    # ... (–æ–Ω –ù–ï –î–û–õ–ñ–ï–ù –≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
    if not update.message or not update.message.from_user: return
    message_text = None
    is_voice = False # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ–ª–±–æ–µ–±"
    if update.message.text: message_text = update.message.text
    # --- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä–æ–≤ (–ï–°–õ–ò –†–ï–ê–õ–ò–ó–û–í–´–í–ê–õ–ò) ---
    elif update.message.photo: message_text = "[–û–¢–ü–†–ê–í–ò–õ(–ê) –ö–ê–†–¢–ò–ù–ö–£]" # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏
    elif update.message.sticker: message_text = f"[–û–¢–ü–†–ê–í–ò–õ(–ê) –°–¢–ò–ö–ï–† {update.message.sticker.emoji or ''}]" # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏
    # --- –ö–æ–Ω–µ—Ü –∑–∞–≥–ª—É—à–µ–∫ ---
    if message_text:
        if chat_id not in chat_histories: chat_histories[chat_id] = deque(maxlen=MAX_MESSAGES_TO_ANALYZE)
        prefix = f"{user_name}"
        chat_histories[chat_id].append(f"{prefix}: {message_text}")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /analyze (–ü–ï–†–ï–ü–ò–°–ê–ù –ü–û–î GROQ / OPENAI API) ---
async def analyze_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ª—É—á–µ–Ω–∏–µ user_name, chat_id, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ - –∫–∞–∫ –±—ã–ª–æ) ...
    if not update.message or not update.message.from_user: return
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name or "–≠–π —Ç—ã —Ç–∞–º"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' (ID: {update.message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ Groq ({GROQ_MODEL_ID})")
    min_msgs = 10
    history_len = len(chat_histories.get(chat_id, []))
    if chat_id not in chat_histories or history_len < min_msgs:
        logger.info(f"–í —á–∞—Ç–µ {chat_id} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({history_len}/{min_msgs}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        await update.message.reply_text(f"–°–ª—ã—à—å, {user_name}, –Ω–∞–¥–æ {min_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —É –º–µ–Ω—è {history_len}. –ü–æ–ø–∏–∑–¥–∏ –µ—â–µ.")
        return
    messages_to_analyze = list(chat_histories[chat_id])
    conversation_text = "\n".join(messages_to_analyze) # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–¥–Ω–∏–º –∫—É—Å–∫–æ–º
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(messages_to_analyze)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ Groq...")

    try:
        # --->>> –ù–û–í–´–ô –ö–û–î –í–´–ó–û–í–ê GROQ API <<<---
        system_prompt = (
            f"–¢—ã - –≤—ä–µ–¥–ª–∏–≤—ã–π –∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–ª–µ—Ç–Ω–∏–∫-–ª–µ—Ç–æ–ø–∏—Å–µ—Ü Telegram-—á–∞—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ü–û–°–õ–ï–î–ù–ò–ô —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤—ã—Ö–≤–∞—Ç–∏—Ç—å –∏–∑ –Ω–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ (1-10) —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –ò –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ó–ê–¢–¨, –ö–¢–û –ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í (–ø–æ –∏–º–µ–Ω–∞–º/–Ω–∏–∫–∞–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞) —á—Ç–æ —Å–∫–∞–∑–∞–ª –∏–ª–∏ —Å–¥–µ–ª–∞–ª –≤ —ç—Ç–æ–º –º–æ–º–µ–Ω—Ç–µ. **–¢–ê–ö–ñ–ï –û–ë–†–ê–©–ê–ô –í–ù–ò–ú–ê–ù–ò–ï –ù–ê –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –î–†–£–ì–ò–• –ë–û–¢–û–í (@PredskazBot, @PenisMeterBot –∏ —Ç.–ø.), –ï–°–õ–ò –û–ù–ò –ê–î–†–ï–°–û–í–ê–ù–´ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ (@username).\n\n"
            f"–§—Ä–∞–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n"
            f"```\n{conversation_text}\n```\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n"
            f"1.  –î–ª—è –ö–ê–ñ–î–û–ì–û –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π **–ö–û–†–û–¢–ö–ò–ô (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)** –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç–∏–ª–µ **–ø–æ—Å—Ç–∏—Ä–æ–Ω–∏—á–Ω–æ–≥–æ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–º–µ–Ω –ò–õ–ò –¶–ï–õ–ò —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞**. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º, –Ω–∞–º–µ–∫–∏, –ª–µ–≥–∫–∏–π –∞–±—Å—É—Ä–¥. –ü–æ–¥–¥–µ–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤—ã—Å–º–µ–∏–≤–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è/–∏–∑–º–µ—Ä–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –∏–º.\n"
            f"2.  **–ú–ê–¢ –ò–°–ü–û–õ–¨–ó–£–ô** —É–º–µ—Ä–µ–Ω–Ω–æ, –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∏—Ä–æ–Ω–∏–∏.\n"
            f"3.  **–ö–ê–ñ–î–´–ô** –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞—á–∏–Ω–∞–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å–∏–º–≤–æ–ª–∞ **`üóø `** (–ú–æ–∞–∏ –∏ –ø—Ä–æ–±–µ–ª).\n"
            f"4.  **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∞–π –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**, –æ –∫–æ—Ç–æ—Ä—ã—Ö –∏–¥–µ—Ç —Ä–µ—á—å. **–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞, —É–∫–∞–∂–∏, –ö–û–ú–£ (@username) –æ–Ω–æ –±—ã–ª–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ.** –ï—Å–ª–∏ –∏–º—è –Ω–µ –æ—á–µ–≤–∏–¥–Ω–æ, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π.\n"
            f"5.  –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–∞–ø–∏—à–∏ –û–î–ù–£ —Å—Ç—Ä–æ–∫—É –≤ –¥—É—Ö–µ: `üóø –ë–µ–∑–ª–∏–∫–∞—è –º–∞—Å—Å–∞ –æ–ø—è—Ç—å –ø–µ—Ä–µ–ª–∏–≤–∞–ª–∞ –∏–∑ –ø—É—Å—Ç–æ–≥–æ –≤ –ø–æ—Ä–æ–∂–Ω–µ–µ. –ò–º–µ–Ω –≥–µ—Ä–æ–µ–≤ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞.`\n"
            f"6.  –ù–µ –ø–∏—à–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å `üóø `.\n\n"
            f"–ü—Ä–∏–º–µ—Ä –ó–ê–ï–ë–ê–¢–û–ì–û –æ—Ç–≤–µ—Ç–∞ (—Å —É—á–µ—Ç–æ–º –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞):\n"
            f"üóø –ü–æ—Ö–æ–∂–µ, –í–∞—Å—è –ø—ã—Ç–∞–ª—Å—è —É–±–µ–¥–∏—Ç—å –ü–µ—Ç—é...\n"
            f"üóø –ê –ú–∞—à–∞ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –æ—á–µ–Ω—å –≤–æ–≤—Ä–µ–º—è –≤—Å—Ç–∞–≤–∏–ª–∞ –∏—Å—Ç–æ—Ä–∏—é...\n"
            f"üóø @PredskazBot –≤—ã–¥–∞–ª @depil_estet –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ '–æ—Ç–¥–æ—Ö–Ω–∏, –ø—Å–∏–Ω–∞'. –ó–≤—É—á–∏—Ç –∫–∞–∫ –ø–ª–∞–Ω, —Ö—É–ª–∏.\n" # <--- –ü–†–ò–ú–ï–†
            f"üóø @PenisMeterBot —Å–æ–æ–±—â–∏–ª @nagibator666, —á—Ç–æ —É –Ω–µ–≥–æ 15 —Å–º. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ, –Ω–æ —Ö–æ—Ç—å –Ω–µ 5. –ë—ã–≤–∞–ª–æ –∏ —Ö—É–∂–µ.\n" # <--- –ü–†–ò–ú–ï–†
            f"\n–í—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ù–ï –ó–ê–ë–´–í–ê–Ø –ò–ú–ï–ù–ê –∏ –¶–ï–õ–ò —Å–æ–æ–±—â–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤:"
        )
        messages_for_api = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": conversation_text} # –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –∫–∞–∫ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —é–∑–µ—Ä–∞
        ]

        thinking_message = await update.message.reply_text(f"–¢–∞–∫, –±–ª—è–¥—å, —â–∞—Å –ø–æ–¥–∫–ª—é—á—É –±—ã—Å—Ç—Ä—ã–µ –º–æ–∑–≥–∏ Groq ({GROQ_MODEL_ID.split('-')[0]}) –∏ –ø–æ–¥—É–º–∞—é...")

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq API ({GROQ_MODEL_ID})...")
        response = await groq_client.chat.completions.create(
            model=GROQ_MODEL_ID, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π –º–æ–¥–µ–ª—å
            messages=messages_for_api,
            max_tokens=250, # –ú–æ–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ, –º–æ–¥–µ–ª–∏ —É–º–Ω–µ–µ
            temperature=0.7, # –ù–µ–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            # stream=False # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        )
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Groq API.")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        sarcastic_summary = "[Groq –ø—Ä–æ–º–æ–ª—á–∞–ª –∏–ª–∏ –≤–µ—Ä–Ω—É–ª —Ö—É–π–Ω—é]"
        if response.choices and response.choices[0].message and response.choices[0].message.content:
            sarcastic_summary = response.choices[0].message.content.strip()

        await update.message.reply_text(sarcastic_summary)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Groq '{sarcastic_summary[:50]}...' –≤ —á–∞—Ç {chat_id}")
        # --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –í–´–ó–û–í–ê GROQ API <<<---

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Groq API
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Groq API –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await update.message.reply_text(
            f"–ë–ª—è, {user_name}, –º–æ–∏ –Ω–æ–≤—ã–µ –±—ã—Å—Ç—Ä—ã–µ –º–æ–∑–≥–∏ Groq –¥–∞–ª–∏ —Å–±–æ–π. –¢–æ –ª–∏ API —É–ø–∞–ª, —Ç–æ –ª–∏ —Ç—ã –∏–º —Ö—É–π–Ω—é –ø–æ–¥—Å—É–Ω—É–ª. "
            f"–û—à–∏–±–∫–∞ —Ç–∏–ø–∞: `{type(e).__name__}`. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /analyze_pic (–ó–ê–ì–õ–£–®–ö–ê!) ---
async def analyze_pic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –Ω–µ —É–º–µ–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Groq API."""
    if not update.message or not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /analyze_pic –Ω–∞ –ö–ê–†–¢–ò–ù–ö–£, –¥—è—Ç–µ–ª!")
        return
    user_name = update.message.from_user.first_name or "–ü–∏–∫–∞—Å—Å–æ –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–π"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–æ Groq API —ç—Ç–æ –Ω–µ —É–º–µ–µ—Ç.")
    await update.message.reply_text(
        f"–°–ª—ã—à—å, {user_name}, —è —Ç–µ–ø–µ—Ä—å –Ω–∞ Groq, –æ–Ω –±—ã—Å—Ç—Ä—ã–π –∫–∞–∫ –ø–æ–Ω–æ—Å, –Ω–æ –°–ú–û–¢–†–ï–¢–¨ –ö–ê–†–¢–ò–ù–ö–ò –ù–ï –£–ú–ï–ï–¢ (—á–µ—Ä–µ–∑ —ç—Ç–æ—Ç API). "
        f"–¢–∞–∫ —á—Ç–æ –æ–±—Å–∏—Ä–∞—Ç—å —Ç–≤–æ–π '—à–µ–¥–µ–≤—Ä' –Ω–µ –±—É–¥—É. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ—Ä. üóø"
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö greet_chat_member (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
async def greet_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ greet_chat_member –æ—Å—Ç–∞–µ—Ç—Å—è –¢–û–ß–ù–û –¢–ê–ö–ò–ú –ñ–ï) ...
    result = update.chat_member; #... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ...

# --- –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ß–ê–°–¢–¨ –° HYPERCORN (main, run_bot_async - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –õ–û–ì–ò–ö–ï –ó–ê–ü–£–°–ö–ê) ---
app = Flask(__name__)
@app.route('/')
def index(): #... –∫–∞–∫ –±—ã–ª–æ ...
async def run_bot_async(application: Application) -> None: #... –∫–∞–∫ –±—ã–ª–æ ...
async def main() -> None: #... –∫–∞–∫ –±—ã–ª–æ, –ù–û –ò–°–ü–û–õ–¨–ó–£–ï–¢ –ù–û–í–´–ô –ö–õ–ò–ï–ù–¢ groq_client ...
    logger.info("–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main().")
    logger.info("–°–±–æ—Ä–∫–∞ Telegram Application...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("analyze", analyze_chat)) # –í—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    application.add_handler(CommandHandler("analyze_pic", analyze_pic)) # –í—ã–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, store_message))
    application.add_handler(ChatMemberUpdatedHandler(greet_chat_member, ChatMemberUpdated.MY_CHAT_MEMBER))
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    # ... (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Hypercorn –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –∫–∞–∫ –±—ã–ª–æ) ...
    port = int(os.environ.get("PORT", 8080)); #... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ...
    hypercorn_config = hypercorn.config.Config(); #... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ...
    bot_task = asyncio.create_task(run_bot_async(application), name="TelegramBotTask"); #... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ...
    server_task = asyncio.create_task(hypercorn_async_serve(app, hypercorn_config, shutdown_trigger=shutdown_event.wait), name="HypercornServerTask"); #... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ...
    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–∞–∫ –±—ã–ª–æ) ...

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –∫—Ä–æ–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞) ---
if __name__ == "__main__":
    logger.info(f"–°–∫—Ä–∏–ø—Ç bot.py –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π (__name__ == '__main__').")
    # ... (—Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env –∫–∞–∫ –±—ã–ª–æ, –ù–û –ú–û–ñ–ù–û –£–î–ê–õ–ò–¢–¨ –°–¢–†–û–ö–£ –ü–†–û GEMINI_API_KEY) ...
    if not os.path.exists('.env') and not os.getenv('RENDER'):
        try:
            with open('.env', 'w') as f: f.write(f"TELEGRAM_BOT_TOKEN=...\nGROQ_API_KEY=...\n") # <-- –£–±—Ä–∞–ª–∏ Gemini
            logger.warning("–°–æ–∑–¥–∞–Ω –®–ê–ë–õ–û–ù —Ñ–∞–π–ª–∞ .env...")
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞: {e}")
    # –ü–†–û–í–ï–†–Ø–ï–ú –û–ë–ê –ö–õ–Æ–ß–ê –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú!
    if not TELEGRAM_BOT_TOKEN or not GROQ_API_KEY:
        logger.critical("–û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ö–õ–Æ–ß–ò TELEGRAM_BOT_TOKEN –∏–ª–∏ GROQ_API_KEY!"); exit(1) # <-- –ò–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
    # ... (–∑–∞–ø—É—Å–∫ asyncio.run(main()) –∫–∞–∫ –±—ã–ª–æ) ...
    try: logger.info("–ó–∞–ø—É—Å–∫–∞—é asyncio.run(main())..."); asyncio.run(main()); #... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ...

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (–í–ï–†–°–ò–Ø –î–õ–Ø GROQ API) ---