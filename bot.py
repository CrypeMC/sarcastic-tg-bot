# --- –ù–ê–ß–ê–õ–û –°–£–ü–ï–†-–ú–ï–ì–ê-–ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (GROQ, –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ –ò –ú–û–î–ï–õ–¨) ---
import logging
import os
import asyncio
from collections import deque
from flask import Flask
import hypercorn.config
from hypercorn.asyncio import serve as hypercorn_async_serve
import signal

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ API (Groq)
from openai import OpenAI, AsyncOpenAI
import httpx

# –ò–º–ø–æ—Ä—Ç—ã Telegram
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes # –£–±—Ä–∞–ª–∏ ChatMemberUpdatedHandler

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã (.env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
load_dotenv()

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
# –°–ö–û–õ–¨–ö–û –ü–û–°–õ–ï–î–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô –•–†–ê–ù–ò–ú –ò –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú
# 500 - –≠–¢–û –î–û–•–£–Ø, –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–î–õ–ï–ù–ù–û/–î–û–†–û–ì–û. –ü–û–°–¢–ê–í–¨ 50-100 –î–õ–Ø –ù–ê–ß–ê–õ–ê!
MAX_MESSAGES_TO_ANALYZE = 50

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if not TELEGRAM_BOT_TOKEN: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù TELEGRAM_BOT_TOKEN!")
if not GROQ_API_KEY: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù GROQ_API_KEY!")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("hypercorn").setLevel(logging.INFO)
logging.getLogger("openai").setLevel(logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–ê GROQ API ---
try:
    groq_client = AsyncOpenAI(
        api_key=GROQ_API_KEY,
        base_url="https://api.groq.com/openai/v1"
    )
    logger.info("–ö–ª–∏–µ–Ω—Ç AsyncOpenAI –¥–ª—è Groq API –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
     logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ Groq: {e}", exc_info=True)
     raise SystemExit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ Groq: {e}")

# ID –ú–û–î–ï–õ–ò –ù–ê GROQ (–£–ë–ï–î–ò–°–¨, –ß–¢–û –û–ù–ê –î–û–°–¢–£–ü–ù–ê!)
GROQ_MODEL_ID = "deepseek-r1-distill-llama-70b" # –¢–í–û–Ø –ú–û–î–ï–õ–¨! –ü–ï–†–ï–ü–†–û–í–ï–†–¨! –ï—Å–ª–∏ –Ω–µ—Ç, —Å—Ç–∞–≤—å llama3-8b-8192
logger.info(f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–¥–µ–ª—å Groq: {GROQ_MODEL_ID}")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
chat_histories = {}
logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {MAX_MESSAGES_TO_ANALYZE}")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä—ã –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∏) ---
async def store_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user:
        return
    message_text = None
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ–ª–±–æ–µ–±"

    if update.message.text:
        message_text = update.message.text
    elif update.message.photo:
        message_text = "[–û–¢–ü–†–ê–í–ò–õ(–ê) –ö–ê–†–¢–ò–ù–ö–£]" # –ó–∞–≥–ª—É—à–∫–∞
    elif update.message.sticker:
        emoji = update.message.sticker.emoji or ''
        message_text = f"[–û–¢–ü–†–ê–í–ò–õ(–ê) –°–¢–ò–ö–ï–† {emoji}]" # –ó–∞–≥–ª—É—à–∫–∞

    if message_text:
        if chat_id not in chat_histories:
            chat_histories[chat_id] = deque(maxlen=MAX_MESSAGES_TO_ANALYZE)
        prefix = f"{user_name}"
        chat_histories[chat_id].append(f"{prefix}: {message_text}")
        # logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ {chat_id}.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /analyze ---
async def analyze_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user: return
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name or "–≠–π —Ç—ã —Ç–∞–º"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ Groq ({GROQ_MODEL_ID})")
    min_msgs = 10
    history = chat_histories.get(chat_id)
    history_len = len(history) if history else 0

    if not history or history_len < min_msgs:
        logger.info(f"–í —á–∞—Ç–µ {chat_id} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({history_len}/{min_msgs}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        await update.message.reply_text(f"–°–ª—ã—à—å, {user_name}, –Ω–∞–¥–æ {min_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —É –º–µ–Ω—è {history_len}. –ü–æ–ø–∏–∑–¥–∏ –µ—â–µ.")
        return

    # –ë–µ—Ä–µ–º –ü–û–°–õ–ï–î–ù–ò–ï N —Å–æ–æ–±—â–µ–Ω–∏–π, N = MAX_MESSAGES_TO_ANALYZE
    messages_to_analyze = list(history) # deque —Å–∞–º —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    conversation_text = "\n".join(messages_to_analyze)
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(messages_to_analyze)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ Groq...")

    try:
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è Groq (—Å üóø –∏ –ø–æ–ø—ã—Ç–∫–æ–π –∏–º–µ–Ω)
        system_prompt = (
             f"–¢—ã - –≤—ä–µ–¥–ª–∏–≤—ã–π –∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–ª–µ—Ç–Ω–∏–∫-–ª–µ—Ç–æ–ø–∏—Å–µ—Ü Telegram-—á–∞—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –≤—ã—Ö–≤–∞—Ç–∏—Ç—å 1-3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞ –ò –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ó–ê–¢–¨, –ö–¢–û (–ø–æ –∏–º–µ–Ω–∞–º/–Ω–∏–∫–∞–º) —á—Ç–æ —Å–∫–∞–∑–∞–ª/—Å–¥–µ–ª–∞–ª. "
             f"–û—Ç–≤–µ—á–∞–π –ö–û–†–û–¢–ö–û (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–æ–º–µ–Ω—Ç) –≤ —Å—Ç–∏–ª–µ –ø–æ—Å—Ç–∏—Ä–æ–Ω–∏—á–Ω–æ–≥–æ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞ —Å –ú–ê–¢–û–ú (—É–º–µ—Ä–µ–Ω–Ω–æ). –ù–∞—á–∏–Ω–∞–π –ö–ê–ñ–î–´–ô –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å 'üóø '. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–π –∏–º–µ–Ω–∞. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏ 'üóø –ë–µ–∑–ª–∏–∫–∞—è –º–∞—Å—Å–∞ –æ–ø—è—Ç—å –ø–µ—Ä–µ–ª–∏–≤–∞–ª–∞ –∏–∑ –ø—É—Å—Ç–æ–≥–æ –≤ –ø–æ—Ä–æ–∂–Ω–µ–µ.' –ù–ï –ü–ò–®–ò –í–°–¢–£–ü–õ–ï–ù–ò–ô."
         )
        messages_for_api = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": conversation_text}
        ]

        thinking_message = await update.message.reply_text(f"–¢–∞–∫, –±–ª—è–¥—å, —â–∞—Å –ø–æ–¥–∫–ª—é—á—É –±—ã—Å—Ç—Ä—ã–µ –º–æ–∑–≥–∏ Groq ({GROQ_MODEL_ID.split('-')[0]}) –∏ –ø–æ–¥—É–º–∞—é...")

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq API ({GROQ_MODEL_ID})...")
        response = await groq_client.chat.completions.create(
            model=GROQ_MODEL_ID,
            messages=messages_for_api,
            max_tokens=300, # –ú–æ–∂–Ω–æ –ø–æ–¥–∫—Ä—É—Ç–∏—Ç—å
            temperature=0.7,
        )
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Groq API.")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        sarcastic_summary = "[Groq –ø—Ä–æ–º–æ–ª—á–∞–ª –∏–ª–∏ —Å–ø–∏–∑–¥–∞–Ω—É–ª —Ö—É–π–Ω—é]"
        if response.choices and response.choices[0].message and response.choices[0].message.content:
            sarcastic_summary = response.choices[0].message.content.strip()

        await update.message.reply_text(sarcastic_summary)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Groq '{sarcastic_summary[:50]}...' –≤ —á–∞—Ç {chat_id}")

    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Groq API –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await update.message.reply_text(
            f"–ë–ª—è, {user_name}, –º–æ–∏ –Ω–æ–≤—ã–µ –±—ã—Å—Ç—Ä—ã–µ –º–æ–∑–≥–∏ Groq –¥–∞–ª–∏ —Å–±–æ–π. –û—à–∏–±–∫–∞: `{type(e).__name__}`. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )

# --- –§–£–ù–ö–¶–ò–Ø analyze_pic –ó–ê–ì–õ–£–®–ï–ù–ê ---
async def analyze_pic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /analyze_pic –Ω–∞ –ö–ê–†–¢–ò–ù–ö–£, –¥—è—Ç–µ–ª!")
        return
    user_name = update.message.from_user.first_name or "–ü–∏–∫–∞—Å—Å–æ –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–π"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–æ Groq API —ç—Ç–æ –Ω–µ —É–º–µ–µ—Ç.")
    await update.message.reply_text(
        f"–°–ª—ã—à—å, {user_name}, —è —Ç–µ–ø–µ—Ä—å –Ω–∞ Groq, –æ–Ω –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –ö–ê–†–¢–ò–ù–ö–ò –ù–ï –í–ò–î–ò–¢. –û–±—Å–∏—Ä–∞—Ç—å –Ω–µ –±—É–¥—É. üóø"
    )

# --- –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ß–ê–°–¢–¨ –° HYPERCORN ---
app = Flask(__name__)
@app.route('/')
def index():
    logger.info("–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ '/', –æ—Ç–≤–µ—á–∞—é OK.")
    return "–Ø —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç, –∏ —è –≤—Å–µ –µ—â–µ –∂–∏–≤ (–Ω–∞–≤–µ—Ä–Ω–æ–µ)."

async def run_bot_async(application: Application) -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application...")
        await application.initialize()
        if not application.updater: logger.critical("Updater –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!"); return
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (start_polling)...")
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("–ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ Application (start)...")
        await application.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç... (–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞)")
        await asyncio.Future() # –û–∂–∏–¥–∞–µ–º –≤–µ—á–Ω–æ
    except (KeyboardInterrupt, SystemExit, asyncio.CancelledError):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    except Exception as e:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ run_bot_async: {e}", exc_info=True)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –û–°–¢–ê–ù–û–í–ö–ò –±–æ—Ç–∞...")
        if application.running:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ Application (stop)..."); await application.stop(); logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä Application –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        if application.updater and application.updater.is_running:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (updater.stop)..."); await application.updater.stop(); logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (updater) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Application (shutdown)..."); await application.shutdown(); logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.")

async def main() -> None:
    # –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    logger.info("–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main().")
    logger.info("–°–±–æ—Ä–∫–∞ Telegram Application...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("analyze", analyze_chat))
    application.add_handler(CommandHandler("analyze_pic", analyze_pic)) # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É

    # --->>> –¢–†–ò –û–¢–î–ï–õ–¨–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –î–õ–Ø store_message <<<---
    # 1. –¢–æ–ª—å–∫–æ –¥–ª—è –¢–ï–ö–°–¢–ê (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, store_message))
    # 2. –¢–æ–ª—å–∫–æ –¥–ª—è –§–û–¢–û
    application.add_handler(MessageHandler(filters.PHOTO, store_message))
    # 3. –¢–æ–ª—å–∫–æ –¥–ª—è –°–¢–ò–ö–ï–†–û–í
    application.add_handler(MessageHandler(filters.Sticker, store_message))
    # --->>> –ö–û–ù–ï–¶ –¢–†–ï–• –û–¢–î–ï–õ–¨–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í <<<---

    # –£–±—Ä–∞–ª–∏ ChatMemberUpdatedHandler
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Hypercorn + –±–æ—Ç–∞
    port = int(os.environ.get("PORT", 8080))
    hypercorn_config = hypercorn.config.Config()
    hypercorn_config.bind = [f"0.0.0.0:{port}"]
    hypercorn_config.worker_class = "asyncio"
    hypercorn_config.shutdown_timeout = 60.0
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hypercorn: {hypercorn_config.bind}, worker={hypercorn_config.worker_class}")
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è Hypercorn –∏ Telegram –±–æ—Ç–∞...")
    shutdown_event = asyncio.Event()
    bot_task = asyncio.create_task(run_bot_async(application), name="TelegramBotTask")
    server_task = asyncio.create_task(
        hypercorn_async_serve(app, hypercorn_config, shutdown_trigger=shutdown_event.wait), # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        name="HypercornServerTask"
    )
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    done, pending = await asyncio.wait([bot_task, server_task], return_when=asyncio.FIRST_COMPLETED)
    logger.warning(f"–û–¥–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å! Done: {done}, Pending: {pending}")
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    if server_task in pending: logger.info("–°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Hypercorn —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É..."); shutdown_event.set()
    logger.info("–û—Ç–º–µ–Ω—è–µ–º –∏ –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á...")
    for task in pending: task.cancel()
    await asyncio.gather(*pending, return_exceptions=True)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
    for task in done:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {task.get_name()}")
        try: await task
        except asyncio.CancelledError: logger.info(f"–ó–∞–¥–∞—á–∞ {task.get_name()} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e: logger.error(f"–ó–∞–¥–∞—á–∞ {task.get_name()} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)
    logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main() –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç ---
if __name__ == "__main__":
    logger.info(f"–°–∫—Ä–∏–ø—Ç bot.py –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π (__name__ == '__main__').")
    # –°–æ–∑–¥–∞–µ–º .env —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–∞–¥–æ
    if not os.path.exists('.env') and not os.getenv('RENDER'):
        logger.warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω...")
        try:
            with open('.env', 'w') as f: f.write(f"TELEGRAM_BOT_TOKEN=...\nGROQ_API_KEY=...\n") # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
            logger.warning("–°–æ–∑–¥–∞–Ω –®–ê–ë–õ–û–ù —Ñ–∞–π–ª–∞ .env...")
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞: {e}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    if not TELEGRAM_BOT_TOKEN or not GROQ_API_KEY: logger.critical("–û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ö–õ–Æ–ß–ò!"); exit(1)
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é asyncio.run(main())...")
        asyncio.run(main())
        logger.info("asyncio.run(main()) –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e: logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True); exit(1)
    finally: logger.info("–°–∫—Ä–∏–ø—Ç bot.py –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

# --- –ö–û–ù–ï–¶ –°–£–ü–ï–†-–ú–ï–ì–ê-–ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (GROQ, –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ –ò –ú–û–î–ï–õ–¨) ---